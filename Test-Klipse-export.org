#+PROPERTY: BLOG Test subtree export
#+OPTIONS: toc:nil 
 # I have no idea why the jekyll layout does not work for me â˜¹
#+name: inline-html-header
#+begin_src elisp :exports none :results html :var url="https://storage.googleapis.com/app.klipse.tech/css/codemirror.css"

"<!DOCTYPE html>
<html class='v2' dir='ltr'>
<head>
<meta content='width=1100' name='viewport'/>
<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>
<title>Programming as Composing</title>

</head>"
#+end_src


#+name: inline-klipse-header
#+begin_src elisp :exports none :results html :var url="https://storage.googleapis.com/app.klipse.tech/css/codemirror.css"
(concat
"<link href=\"" url "\" rel=\"stylesheet\" type=\"text/css\"></link>
<style>
  body { background-color: #eeeeee; }
  pre, code { font-size: 16px; background-color: white; }
</style>")
#+end_src


#+name: inline-klipse-footer
#+begin_src elisp :exports none :results html :var url="https://storage.googleapis.com/app.klipse.tech/plugin/js/klipse_plugin.js"
(concat "<script>
window.klipse_settings = {
  selector: '.klipse',
  selector_reagent: '.reagent'
};
</script>
<script src=\"" url "\"></script>")
#+end_src



http://emacs.stackexchange.com/a/28387


#+name: inline-klipse-clojure
#+begin_src elisp :exports none :results html :var blk=""
(concat
 "<pre><code class=\"klipse\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</code></pre>")
#+end_src
#+name: inline-klipse-clojure-s
#+begin_src elisp :exports none :results html :var blks='("")
(setq res "")
(concat
 "<pre><code class=\"klipse\">\n"
(dolist (blk blks res)
  (setq res (concat res "\n" (cadr (org-babel-lob--src-info blk)))))
 "\n"
 "</code></pre>")
#+end_src
should really be an optional boolean parameter of inline-klipse-clojure ! 
#+name: inline-hidden-klipse-clojure
#+begin_src elisp :exports none :results html :var blk=""
(concat
 "<pre style=\"display: none;\"><code class=\"klipse\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</code></pre>")
#+end_src

#+name: inline-hidden-klipse-clojure-s
#+begin_src elisp :exports none :results html :var blks='("")
(setq res "")
(concat
 "<pre style=\"display: none;\"><code class=\"klipse\">\n"
(dolist (blk blks res)
  (setq res (concat res "\n" (cadr (org-babel-lob--src-info blk)))))
 "\n"
 "</code></pre>")
#+end_src

#+name: inline-klipse-reagent
#+begin_src elisp :exports none :results html :var blk=""
(concat
 "<pre><code class=\"reagent\">\n"
 (cadr (org-babel-lob--src-info blk))
 "\n"
 "</code></pre>")
#+end_src

#+name: inline-klipse-reagent-s
#+begin_src elisp :exports none :results html :var blks='("")
(setq res "")
(concat
 "<pre><code class=\"reagent\">\n"
(dolist (blk blks res)
  (setq res (concat res "\n" (cadr (org-babel-lob--src-info blk)))))
  "\n"
 "</code></pre>")
#+end_src
#+name: inline-klipse-reagent-anim-s
#+begin_src elisp :exports none :results html :var blks='("") 
(setq res "")
(concat
 "<pre><code class=\"reagent\" data-loop-msec=\"25\" >\n"
(dolist (blk blks res)
  (setq res (concat res "\n" (cadr (org-babel-lob--src-info blk)))))
  "\n"
 "</code></pre>")
#+end_src


#+name: foo
#+begin_src clojure :exports none
(+ 1 1)
#+end_src

#+name: bar
#+begin_src clojure :exports none
(+ 2 2)
#+end_src

http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html

https://github.com/yoshinari-nomura/org-octopress/blob/master/ox-jekyll.el

#+NAME: init-reagent-examples
#+BEGIN_SRC clojure :exports none
(ns my.reagent-examples
  (:require
    [clojure.string :as string]
    [reagent.core :as reagent]
[reagent.ratom]))

(enable-console-print!)
#+END_SRC

#+NAME: src-dynamic-homoiconicity
#+BEGIN_SRC clojure :exports none
(defn comp [& fs]
(with-meta (apply
(fn ([] identity)
  ([f] f)
  ([f g] 
     (fn 
       ([] (f (g)))
       ([x] (f (g x)))
       ([x y] (f (g x y)))
       ([x y z] (f (g x y z)))
       ([x y z & args] (f (apply g x y z args)))))
  ([f g & fs]
(reduce comp (list* f g fs))))
 fs)
    {:is-from comp
:args fs}))

(defn partial [& args]
(with-meta (apply (fn
([f] f)
  ([f arg1]
   (fn
     ([] (f arg1))
     ([x] (f arg1 x))
     ([x y] (f arg1 x y))
     ([x y z] (f arg1 x y z))
     ([x y z & args] (apply f arg1 x y z args))))
  ([f arg1 arg2]
   (fn
     ([] (f arg1 arg2))
     ([x] (f arg1 arg2 x))
     ([x y] (f arg1 arg2 x y))
     ([x y z] (f arg1 arg2 x y z))
     ([x y z & args] (apply f arg1 arg2 x y z args))))
  ([f arg1 arg2 arg3]
   (fn
     ([] (f arg1 arg2 arg3))
     ([x] (f arg1 arg2 arg3 x))
     ([x y] (f arg1 arg2 arg3 x y))
     ([x y z] (f arg1 arg2 arg3 x y z))
     ([x y z & args] (apply f arg1 arg2 arg3 x y z args))))
  ([f arg1 arg2 arg3 & more]
(fn [& args] (apply f arg1 arg2 arg3 (concat more args)))))
args)
    {:is-from partial
     :args args}))


(defn mapv [& args]
(with-meta (apply (fn
  ([f coll]
     (-> (reduce (fn [v o] (conj! v (f o))) (transient []) coll)
         persistent!))
  ([f c1 c2]
     (into [] (map f c1 c2)))
  ([f c1 c2 c3]
     (into [] (map f c1 c2 c3)))
  ([f c1 c2 c3 & colls]
     (into [] (apply map f c1 c2 c3 colls))))
args)
    {:is-from mapv}))

(defn merged-juxt[fs]
  (with-meta (comp (partial reduce into []) (apply juxt fs))
    {:is-from merged-juxt
     :args fs}))

#+END_SRC
 
#+NAME: src-svg-polyline
#+BEGIN_SRC clojure :exports none
          (defn svg-polyline[ps]
          (let[[[x0 y0] & ps] ps
          init-point (str "M " x0 ", " y0 " ")
          seg (fn[[x y]] (str "L " x ", " y " "))]
          (reduce #(str %1 (seg %2)) init-point ps)))
#+END_SRC
#+NAME: src-svg-polyline-use
#+BEGIN_SRC clojure :exports none
          (svg-polyline [[10 10][10 20][20 20]])
#+END_SRC
#+NAME: src-draw-polylines
#+BEGIN_SRC clojure :exports none
(defn draw-polylines[[w h] pss]
          [:svg {:width w :height h}
          [:path {:stroke "black" :stroke-width 1 :fill "none" :d  (reduce str (map svg-polyline pss))}] ])
#+END_SRC

#+NAME: src-draw-polylines-use
#+BEGIN_SRC clojure :exports none
[draw-polylines [300 300] [[[100 100][100 200][200 250]]]]
#+END_SRC

#+NAME: src-add
#+BEGIN_SRC clojure :exports none
    (defn add [[x0 y0][x1 y1]]
    [(+ x0 x1)(+ y0 y1)])
#+END_SRC

#+NAME: src-add-use
#+BEGIN_SRC clojure :exports none
    (add [100 200] [10 20])
#+END_SRC


#+NAME: src-make-polylines-transform
#+BEGIN_SRC clojure :exports none
    (def make-polylines-transform (comp (partial partial mapv) (partial partial mapv) ))
#+END_SRC

#+NAME: src-make-polylines-transform-use
#+BEGIN_SRC clojure :exports none
    [draw-polylines [400 400] ((make-polylines-transform (partial add [100 50])) [[[100 100][100 200][200 250]] [[50 50][200 50][200 100]]])]
#+END_SRC


#+NAME: src-rotate
#+BEGIN_SRC clojure :exports none
(defn sin[x]
  (.sin js/Math x))
(defn cos[x]
          (.cos js/Math x))

(def PI
  (.-PI js/Math))
    (def sqrt #(.sqrt js/Math %))

    (defn rotate [a [x y]]
    (let [c (cos a)
          s (sin a)]
    [(- (* c x) (* s y)) (+ (* s x) (* c y))]))
#+END_SRC

#+NAME: src-rotate-use
#+BEGIN_SRC clojure :exports none
    (rotate (/ PI 4) [10 20])
#+END_SRC

#+NAME: src-regular-polygon
#+BEGIN_SRC clojure :exports none
    (def TWO_PI (* 2 PI))
    (defn regular-polygon [n]
    (vec (take (inc n)(iterate (partial rotate (/ TWO_PI n)) [1. 0]))))
#+END_SRC

(defn sierp-sq-step[pps]
(reduce into [] (for [x [-1 0 1] y [-1 0 1] :when (or (not (zero? x)) (not(zero? y)))] 
       ((make-polylines-transform (comp (partial add (rotate (/ PI 4) (scale (sqrt 2) [x y]))) (partial scale (/ 1 3)))) pps))))
(def sierp-sq-params-f [[][sierp-sq-step (constantly [(regular-polygon 4)])]])
(defn sierp-sq[n]
  (let[center (fn c [n](if (<= n 0) 0 (+ (/ 2 (power 3 (dec n))) (c (dec n))) ))
       u (fn[n](+ (center n) (/ 1 (power 3 n))))]
    ((make-polylines-transform (partial scale (/ 1 (u (dec n)))))(fractal-f sierp-sq-params-f n))))

(defn squares-params-f[angle invertRatio]
  (let[golden-ratio (/ 2. (+ 1. (sqrt 5)))
       [factor ratio a] (if invertRatio [-1 (/ 1. golden-ratio) angle ]
                          [1 golden-ratio (- angle)])]
    [[] [(make-polylines-transform (comp (make-rotate-around [factor 0] a)
                                         (partial add [(* factor (+ 1. ratio)) 0])
                                         (partial scale ratio)))
         ;; should use (power ratio ?)
         (fn[n](sierp-sq (if invertRatio 3 (min 3 (max 1 (- 3 n))))))]]))
(defn regular-polygon [n]
    (vec (take (inc n)(iterate (partial rotate (/ TWO_PI n)) [1. 0]))))
(defn sierp-sq-step[pps]
(reduce into [] (for [x [-1 0 1] y [-1 0 1] :when (or (not (zero? x)) (not(zero? y)))] 
       ((make-polylines-transform (comp (partial add (rotate (/ PI 4) (scale (sqrt 2) [x y]))) (partial scale (/ 1 3)))) pps))))
(def sierp-sq-params-f [[][sierp-sq-step (constantly [(regular-polygon 4)])]])
(defn sierp-sq[n] ((make-polylines-transform (partial scale (/ 1 (power (sqrt 2) n))))(fractal-f sierp-sq-params-f n)))



(def golden-squares-state (reagent.core/atom {:angle (/ PI -2) }))
(defn gui-golden-squares[]
  (let[angle (:angle @golden-squares-state)]
    [:div 
     [:div [:input {:type "range" :value (:angle @golden-squares-state) :step 0.01 :min (/ PI -2)  :max (/ PI 2)  :style {:width "90%"}
                    :on-change (fn[e] (swap! golden-squares-state assoc 
                                             :angle (js/parseFloat (.-target.value e))))}]]
     [draw-fitted-polylines [512 512](let[f1 (fractal-f (squares-params-f angle false) 12)]
                                   ((make-polylines-transform (partial rotate (/ angle -2)))(reduce into [] [f1 ((make-polylines-transform (comp (make-rotate-around [-1 0] angle)(partial add [-2 0])
                                                                                        (fn[[x y]][(- x) y]))) f1)])))]]))


#+NAME: src-regular-polygon-use
#+BEGIN_SRC clojure :exports none
    [draw-fitted-polylines [200 200] (map regular-polygon (range 3 7))]
#+END_SRC


#+NAME: src-scale
#+BEGIN_SRC clojure :exports none
    (defn scale [k p]
    (mapv (partial * k) p))
    (def minus (partial scale -1.))
#+END_SRC

#+NAME: src-scale-use
#+BEGIN_SRC clojure :exports none
    (scale 2 [10 20])
#+END_SRC


#+NAME: src-draw-fitted-polylines
#+BEGIN_SRC clojure :exports none
(def -INF (.-NEGATIVE_INFINITY js/Number))
(def INF (.-POSITIVE_INFINITY js/Number))

    (defn bounding-box[pss]
    (->> pss (reduce into [])(reduce (fn[[[x-min y-min][x-max y-max]][x y]] [[(min x-min x) (min y-min y)][(max x-max x)(max y-max y)]]) [[INF INF][-INF -INF]])))
      (defn make-fitting-transform[[w h] pss]
      (let[[[x-min y-min][x-max y-max]](bounding-box pss)
      s (min (/ w (- x-max x-min)) (/ h (- y-max y-min)))
      center (scale 0.5  (add [x-min y-min] [x-max y-max]))]
      (comp (partial add [(/ w 2) (/ h 2)]) (partial scale s) (partial add (minus center)))))
      (defn draw-fitted-polylines[wh pss]
      (draw-polylines wh ((make-polylines-transform (make-fitting-transform wh pss)) pss)))
#+END_SRC

#+NAME: src-draw-fitted-polylines-use
#+BEGIN_SRC clojure :exports none
    [draw-fitted-polylines [200 200] ((make-polylines-transform (comp (partial add [100 100]) (partial rotate (/ PI 4)))) [[[10 10][10 20][20 25]][[5 5][20 5][20 10]]])]
#+END_SRC


#+NAME: src-make-rotate-around
#+BEGIN_SRC clojure :exports none
(defn make-rotate-around [r a]
  (comp (partial add r)(partial rotate a) (partial add (minus r))))
#+END_SRC

#+NAME: src-make-rotate-around-use
#+BEGIN_SRC clojure :exports none
((make-rotate-around [1 0] (/ PI 2)) [2 0])
#+END_SRC


#+NAME: src-fractal-sierpinski
#+BEGIN_SRC clojure :exports none
         (defn fractal-step [[step-f step-elts] current-elts]
  (into step-elts (step-f current-elts)))

(defn fractal [[init-elts step-params] details]
  (nth (iterate (partial fractal-step step-params) init-elts) details))

         (defn merged-juxt[fs]
         (comp (partial reduce into [])(apply juxt fs)))
         ;; cf. infra
         (defn merged-juxt[fs]
         (with-meta (comp (partial reduce into []) (apply juxt fs))
         {:is-from merged-juxt
         :args fs}))


(defn sierpinski-params [n]
  (let[step-elt (regular-polygon n)
       make-transform #(make-polylines-transform (comp (partial add %)
                                                       (partial scale (/ 1 (dec n)))))]
  (condp = n
    3 [[]
       [(merged-juxt (for [i [0 1 2]] (make-transform (rotate (+ PI (* i 2 (/ PI 3))) [1. 0.]))))
        [step-elt]]]
    4 [[]
       [(merged-juxt (let [d [-1 0 1]]
                       (for [dx d dy d :when (not= 0 dx dy)]
                         (make-transform (scale (sqrt 2.) [dx dy])))))
        [(map (partial rotate (/ PI 4)) step-elt)]]])))
#+END_SRC


 # Finally figured out how to factor some org fragment
#+NAME: text-test
#+BEGIN_SRC sh :output :results raw  :exports none
cat<<EOF
This is an *org* fragment
With
 \alpha text^{sup}
EOF
#+END_SRC


* DONE spirographs  
  CLOSED: [2017-03-19 Sun 22:20] SCHEDULED: <2017-03-19 Sun>
  :PROPERTIES:
  :EXPORT_JEKYLL_LAYOUT:
  :filename: 2017-03-19-spirographs
  :END:

#+call: inline-html-header()
#+call: inline-klipse-header()

 

#+NAME: src-spirograph
#+BEGIN_SRC clojure :exports none
  (defn spirograph[rks]
    (fn[a]
      (into [[(- (reduce + (map first rks))) 0]]
            (first (reduce (fn[[res c][r k]]
                             (let[next-c (- c r)]
                               [(map (make-rotate-around [next-c 0] (* k a))
                                     (conj res [c 0])) next-c]))
                           ['() 0]
                           (reverse rks))))))
#+END_SRC

#+NAME: src-spirograph-use
#+BEGIN_SRC clojure :exports none
[:div
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph [[50 1][45 -4]]) (partial * PI (/ 1 256))) (range 512)))]]
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph [[50 1][45 -3.25]]) (partial * PI 4 (/ 1 256))) (range 512)))]]
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph [[1 1][(/ 1. 2) -7]]) (partial * PI  (/ 1 256))) (range 512)))]]
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph [[1  1][(/ 1. 2) 4]]) (partial * PI (/ 1. 256))) (range 512)))]]
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph [[1  1][(/ 1. 2) 4][ (/ 1. 6) 16]]) (partial * PI  (/ 1. 256))) (range 513)))]]
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph [[1  1][(/ 1. 2) 8][ (/ 1. 6) 16]]) (partial * PI  (/ 1. 256))) (range 513)))]]
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph [[1  1][(/ 1. 2) 2][(/ 1. 4) 6][ (/ 1. 4) 5]]) (partial * PI  (/ 1. 256))) (range 513)))]]
 ]
#+END_SRC

#+NAME:src-spiro-1-spiro-2
#+BEGIN_SRC clojure :exports none
(defn spiro-1[n]
  (let[c (/ (condp = n
              10 15
              8 4
              9 10
              20 25
              15)
            200)
       a (/ (+ 1 c) 2)
       b-size (+ 1 (/ (sqrt 2) 2))
       c-size (/ (- 2 (sqrt 2)) 4)
       b-c-ratio (/ b-size c-size)
       b (/ (- 1 a) (+ 1. (/ 1 b-c-ratio)))]
    [[a 1][b (- n)][(/ b b-c-ratio) (* 4 n)]]))

(def spiro-2 (let[m (/ 1 (+ 3 (/ 1 3)))
                  s (/ m 6)][[(+ (* 2 m) s) 1][m -12][s (* 6 12)]]))
#+END_SRC

#+NAME:src-spiro-1-spiro-2-use
#+BEGIN_SRC clojure :exports none
[:div
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph (spiro-1 10)) (partial * PI (/ 1 256))) (range 513)))]]
 [draw-fitted-polylines [200 200] [(mapv last (map (comp (spirograph spiro-2) (partial * PI  (/ 1 256))) (range 512)))]]]
#+END_SRC

#+NAME: src-gui-spiro
#+BEGIN_SRC clojure :exports none
(def curves (mapv (fn[[rks n]] 
(mapv (comp (spirograph rks) (partial * PI (/ n 256))) (range 513)))
                  [[[[50 1][45 -4]] 1]
                   [[[50 1][45 -3.25]] 4]
                   [[[1 1][(/ 1. 2) -7]] 1]
                   [[[1  1][(/ 1. 2) 4]] 1]
                   [[[1  1][(/ 1. 2) 4][ (/ 1. 6) 16]] 1]
                   [[[1  1][(/ 1. 2) 8][ (/ 1. 6) 16]] 1]
                   [[[1  1][(/ 1. 2) 2][(/ 1. 4) 6][ (/ 1. 4) 5]] 1]
                   [(spiro-1 10) 1]
                   [spiro-2 1]]))

(def wh [120 120])
(def fitting-transforms (mapv (comp make-polylines-transform 
(partial make-fitting-transform wh) 
vector 
(partial mapv last)) curves)) 
(defn arm+curve[pps n] [(nth pps n) (mapv last (take n pps))])
(def spirograph-state (reagent.core/atom {:step 200}))
(defn gui-spiro1[]
  (let[step (:step @spirograph-state)]
    [:div 
     [:div [:input {:type "range" :value (:step @spirograph-state) :min 0  :max 512  :style {:width "90%"}
                    :on-change (fn[e] (swap! spirograph-state assoc 
:step (int (js/parseFloat (.-target.value e)))))}]]
     (into [:div]
           (map (fn[i](let[c (nth curves i)]
                        [draw-polylines (map (partial * 1.2) wh)
                        ((nth fitting-transforms i) 
                        (arm+curve c (:step @spirograph-state)))]))
                        (range (count curves))))]))
#+END_SRC

#+NAME: src-gui-spiro-use
#+BEGIN_SRC clojure :exports none
(defn gui-spiro1[]
  (let[step (:step @spirograph-state)]
    [:div 
     [:div [:input {:type "range" :value (:step @spirograph-state) :min 0  :max (* 1 520)  :style {:width "90%"}
                    :on-change (fn[e] (swap! spirograph-state assoc :step (int (js/parseFloat (.-target.value e)))))}]]
     (into [:div]
           (map (fn[i](let[c (nth curves i)]
                        [draw-polylines (map (partial * 1.2) wh) ((nth fitting-transforms i) 
(arm+curve c (:step @spirograph-state)))])) (range (count curves))))]))
#+END_SRC

#+call: inline-hidden-klipse-clojure-s('("init-reagent-examples" "src-svg-polyline" "src-draw-polylines" "src-add" "src-make-polylines-transform"  "src-rotate" "src-scale" "src-draw-fitted-polylines" "src-make-rotate-around" "src-spirograph" "src-spiro-1-spiro-2" "src-gui-spiro"))

The nice thing about drawing is that one can easily draw nice patterns, using compositions of primitive patterns.


One of the most elementary "pattern" would be the circle, with the most basic [[https://en.wikipedia.org/wiki/Circular_symmetry][Circular symmetry]].


 While a plain circle is not that pretty, just composing a few of them with spirographs
 can result in pretty drawings :

#+call: inline-klipse-reagent-s('("src-gui-spiro" "src-gui-spiro-use"))

Of course, some parameters make for prettier drawings :

#+call: inline-klipse-reagent-s('("src-spiro-1-spiro-2" "src-spiro-1-spiro-2-use"))

So what is a spirograph ? We want to have a function \( \alpha \rightarrow [x y] \) and the function will be parametrized by a sequence of [radius angular-velocity].

It is easier to go backward, from the last radius to the first, each time *composing* rotatations around the previous center.

#+call: inline-klipse-reagent-s( '("src-spirograph"  "src-spirograph-use"))


How does one rotate a point around any center ? By *composing* translations and rotation around the origin.

As we will *compose* the resulting function, we might as well write a /make-XXX/ that returns the rotating function curryfied / partially applied to the rotation center and the angle.
Instead, we could define a function taking all three parameters (rotation center, angle, and point to be rotated) and partially apply it each time we want to compose it.
 
#+call: inline-klipse-clojure-s( '("src-make-rotate-around"  "src-make-rotate-around-use"))

The rotation of a point around the origin is trivially defined.

#+call: inline-klipse-clojure-s( '("src-rotate"  "src-rotate-use"))

As we want to be able to display drawing in canvas of a given size, we *compose* scaling and translating the polylines so that it fits the canvas.

#+call: inline-klipse-reagent-s( '("src-draw-fitted-polylines"  "src-draw-fitted-polylines-use"))

Scaling from the origin is trivially defined. We might as well define a unary minus while we are at it.

#+call: inline-klipse-clojure-s( '("src-scale"  "src-scale-use"))

Adding two vectors in the usual trivial way.

#+call: inline-klipse-clojure-s('("src-add" "src-add-use"))


We are interested in transforming drawings. Drawings are sequences (vectors) of polylines, and polylines are vectors of points (and points are vectors of coords [x y] ).

So we can easily make a drawing-transforming function from a point-transforming function by *composing* sequence traversals and the given point-transforming function.
We can even do it in a [[https://en.wikipedia.org/wiki/Tacit_programming][tacit]] way, which will be useful for other purposes (but for now, any "equivalent" definition would do).
 
#+call: inline-klipse-reagent-s( '("src-make-polylines-transform"  "src-make-polylines-transform-use"))

Actually drawing (as in "displaying") the drawing is creating the svg fragment by concatenating the svg fragments for each polyline.
TODO: check for empty drawing !

#+call: inline-klipse-reagent-s('("src-draw-polylines" "src-draw-polylines-use"))

The svg fragment for a polyline is just concatenating a =Move= to the first point and =Line= to each of the remain points.

TODO: check for empty polyline !

#+call: inline-klipse-clojure-s( '("src-svg-polyline"  "src-svg-polyline-use"))


#+call: inline-klipse-footer()



* DONE Fractals
  CLOSED: [2017-03-20 Mon 01:34] SCHEDULED: <2017-03-20 Mon>
  :PROPERTIES:
  :EXPORT_JEKYLL_LAYOUT: 
  :filename: 2017-03-20-fractals
  :END:

#+NAME: src-gui-fractals
#+BEGIN_SRC clojure :exports none
    (def memo-fractal (memoize fractal))
    (def fractal-name->params { "hilbert-curve" hilbert-params
                                                      "tree" (tree-params [(/ PI 6) (/ PI -3)])
                                                      "sierp-3" (sierpinski-params 3)
                                                      "sierp-4" (sierpinski-params 4)
      "koch" koch-params
      "koch-line" koch-line-params
      })
(def fractal-state (reagent.core/atom {:params (first (vals fractal-name->params)) :step 0}))
(defn gui-fractals[]
  (let[{:keys [params step]} @fractal-state]
    [:div
     [:div (into [:select {:on-change (fn[e] (swap! fractal-state assoc :params (get fractal-name->params (.-target.value e))))}]
           (mapv (fn[k] [:option {:value k} k]) (keys fractal-name->params)))]
     [:div [:input {:type "range" :value (:step @fractal-state) :min 0 :max 6  :style {:width "90%"}
              :on-change (fn[e] (swap! fractal-state assoc :step (js/parseFloat (.-target.value e))))}]]
     [draw-fitted-polylines [400 400] (memo-fractal params (int step))]]))
#+END_SRC

#+NAME: src-gui-fractals-use
#+BEGIN_SRC clojure :exports none
(defn gui-fractals[]
  (let[{:keys [params step]} @fractal-state]
    [:div
     [:div (into [:select {:on-change (fn[e] (swap! fractal-state assoc :params (get fractal-name->params (.-target.value e))))}]
           (mapv (fn[k] [:option {:value k} k]) (keys fractal-name->params)))]
     [:div [:input {:type "range" :value (:step @fractal-state) :min 0 :max 6  :style {:width "90%"}
              :on-change (fn[e] (swap! fractal-state assoc :step (js/parseFloat (.-target.value e))))}]]
     [draw-fitted-polylines [400 400] (memo-fractal params (int step))]]))
#+END_SRC

#+NAME: src-gui-fractals-with-steps
#+BEGIN_SRC clojure :exports none
    (def memo-fractal-with-steps (memoize fractal-with-steps)) ;; not so sure about a memo with a float arg ! :(
(def fractal-with-steps-state (reagent.core/atom {:params (first (vals fractal-name->params)) :step 0}))
(defn gui-fractals-stepified[]
  (let[{:keys [params step]} @fractal-with-steps-state]
    [:div
     [:div (into [:select {:on-change (fn[e] (swap! fractal-with-steps-state assoc :params (get fractal-name->params (.-target.value e))))}]
           (mapv (fn[k] [:option {:value k} k]) (keys fractal-name->params)))]
     [:div [:input {:type "range" :value (:step @fractal-with-steps-state) :step 0.01 :min 0 :max 6  :style {:width "90%"}
              :on-change (fn[e] (swap! fractal-with-steps-state assoc :step (js/parseFloat (.-target.value e))))}]]
     [draw-fitted-polylines [400 400] (memo-fractal-with-steps params step)]]))

#+END_SRC

#+NAME: src-gui-fractals-with-steps-use
#+BEGIN_SRC clojure :exports none
(defn gui-fractals-stepified[]
  (let[{:keys [params step]} @fractal-with-steps-state]
    [:div
     [:div (into [:select {:on-change (fn[e] (swap! fractal-with-steps-state assoc :params (get fractal-name->params (.-target.value e))))}]
           (mapv (fn[k] [:option {:value k} k]) (keys fractal-name->params)))]
     [:div [:input {:type "range" :value (:step @fractal-with-steps-state) :step 0.01 :min 0 :max 6  :style {:width "90%"}
              :on-change (fn[e] (swap! fractal-with-steps-state assoc :step (js/parseFloat (.-target.value e))))}]]
     [draw-fitted-polylines [400 400] (memo-fractal-with-steps params step)]]))

#+END_SRC

#+NAME: src-fractal-with-steps
#+BEGIN_SRC clojure :exports none
(defn sequence-steps [n step-factor]
  (let [p (* n step-factor)]
    (map #(-> (- p %) (min 1) (max 0)) (range n))))

(defn is-from [v]
  (get (meta v) :is-from :default))

(defn get-args [v]
  (:args (meta v)))

(defmulti stepify (fn [s v] (is-from v)))

(defmethod stepify :default [s v]
  v)

(defmethod stepify partial [s p]
  (let [args (get-args p)
        arg0 (first args)]
    (condp = arg0
      add (partial add (scale s (second args)))
      rotate (partial rotate (* (second args) s))
      scale (partial scale (js/Math.pow (second args) s))
      mapv (partial mapv (stepify s (second args)))
      :default (apply p (map (partial stepify s))))))

(defmethod stepify comp [s c]
  (let [args (get-args c)]
    (apply comp (map stepify
                        (reverse (sequence-steps (count args) s))
                        args))))

(defmethod stepify merged-juxt [s c]
  (let [args (get-args c)]
    (merged-juxt (map stepify
                      (sequence-steps (count args) s)
                      args))))


(defmethod stepify :default [s v]
  v)

(defn params-step [s [init-scene [step-fs step-scene]]]
  [init-scene [(stepify s step-fs) step-scene]])

(def EPSILON 0.01)
(defn fractal-with-steps [params details]
  (let [[init-scene step-params] params
        int-d (int details)
        int-fractal (nth (iterate (partial fractal-step step-params) init-scene) int-d)
        fractional-d (- details int-d)]
    (if (<= fractional-d EPSILON)
      int-fractal
      (fractal-step (second (params-step fractional-d params)) int-fractal))))


#+END_SRC

#+NAME: src-fractal-with-steps-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400] (fractal-with-steps (sierpinski-params 3) 1.75)]

#+END_SRC


#+NAME: src-fractal-sierpinski-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400] (fractal (sierpinski-params 3) 6)]
#+END_SRC



#+NAME: src-fractal-tree
#+BEGIN_SRC clojure :exports none
(defn tree-params [angles]
  (let[branch [0 -1]
       ratio (/ (+ 1 (sqrt 5.)) 2.)]
    [[]
     [(merged-juxt (for [a angles]
                     (make-polylines-transform
                                             (comp (partial add branch)
                                                      (partial scale (/ 1 ratio))
                                                      (partial rotate a)))))
      [[[0. 0] branch]]]]))
#+END_SRC

#+NAME: src-fractal-tree-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400] (fractal (tree-params [(/ PI 6)(/ PI -3)]) 8)]
#+END_SRC

#+NAME: src-fractal-koch
#+BEGIN_SRC clojure :exports none
(def koch-params [[[[-0.5 0][0.5 0]]]
                  [(merged-juxt (for [[v a] [[[(/ -1 3) 0] 0]
                                             [[(/ 1 3) 0] 0]
                                             [(rotate (/ PI -3) [(/ 1 6) 0]) (/ PI 3)]
                                             [(rotate (/ PI 3) [(/ -1 6) 0]) (/ PI -3)]]]
                                        (make-polylines-transform (comp (partial add v)
                                                                   (partial rotate a)
                                                                   (partial scale (/ 1 3))))))
                   []]])
#+END_SRC

#+NAME: src-fractal-koch-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400] (fractal koch-params 4)]
#+END_SRC

#+NAME: src-fractal-hilbert-transform
#+BEGIN_SRC clojure :exports none
    ;; hilbert is different because there is only one polyline. We do not transform and merge sequences of polylines but transform and merge polylines (sequences of points). Also, the initial polyline is only one point long.
(def hilbert-transform
    (comp (merged-juxt
            [(comp (partial mapv (comp (partial add [-0.5 0.5]) (partial rotate (/ PI 2)))) reverse)
             (partial mapv (partial add [-0.5 -0.5]))
        	 (partial mapv (partial add [0.5 -0.5]))
             (comp (partial mapv (comp (partial add [0.5 0.5]) (partial rotate (/ PI -2)))) reverse)])
          (partial mapv (partial scale 0.5))))
#+END_SRC

#+NAME: src-fractal-hilbert-transform-use
#+BEGIN_SRC clojure :exports none
    [draw-fitted-polylines [400 400] [(nth (iterate hilbert-transform [[0 0]]) 5)]]
#+END_SRC


#+NAME: src-fractal-hilbert
#+BEGIN_SRC clojure :exports none
    (def hilbert-params [[[[0 0]]] [(partial mapv hilbert-transform) []]])
#+END_SRC

#+NAME: src-fractal-hilbert-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400] (fractal hilbert-params 6)]
#+END_SRC


#+NAME: src-fractal-koch-line-transform
#+BEGIN_SRC clojure :exports none
    (def koch-transform
    (let [s (partial scale (/ 1 3))]
    (comp (merged-juxt
            [(partial mapv (comp (partial add [(/ -1 3) 0]) s))
    (comp rest (partial mapv (comp (partial add (rotate (/ PI 3) [(/ -1 6) 0])) (partial rotate (/ PI -3)) s)))
    (comp rest (partial mapv (comp (partial add (rotate (/ PI -3) [(/ 1 6) 0])) (partial rotate (/ PI 3)) s)))
    (comp rest (partial mapv (comp (partial add [(/ 1 3) 0]) s)))]))))
#+END_SRC

#+NAME: src-fractal-koch-line-transform-use
#+BEGIN_SRC clojure :exports none
    [draw-fitted-polylines [400 400] [(nth (iterate koch-transform [[-0.5 0][0.5 0]]) 2)]]
#+END_SRC

#+NAME: src-fractal-koch-line
#+BEGIN_SRC clojure :exports none
    (def koch-line-params [[[[-0.5 0] [0.5 0]]] [(partial mapv koch-transform) []]])
#+END_SRC

#+NAME: src-fractal-koch-line-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400] (fractal koch-line-params 6)]
#+END_SRC

#+NAME: src-test-canvas
#+BEGIN_SRC clojure :exports none
(let [canvas (js/document.getElementById "canvas-1")
      ctx (.getContext canvas "2d")
      width (.-width canvas)
      height (.-height canvas)]
  (set! (.-fillStyle  ctx) "red")
  (.clearRect ctx 0 0 width height)
  (.fillRect ctx 0 0 width height))
#+END_SRC

#+NAME: src-gif-save-svg
#+BEGIN_SRC clojure :exports none
(defn str->url [s t]
(let[blob (js/Blob. #js [s] #js {:type t})]
              (.createObjectURL js/URL blob) ))

(def worker-url (let[ gif-worker-src (.-textContent (. js/document (getElementById "gif-js-worker-code")))] 
(str->url gif-worker-src "application/javascript")))

;;(reagent/render-to-string 
;;reagent.dom.server 
(defn save-svgs![[w h] svg-strs filename] 
(let[gif (js/GIF. #js {:workers 4
:quality 1
:width w
:height h
:workerScript worker-url
})
_ (.on gif "finished" (fn[blob](let[download-link (. js/document (createElement "a"))]
 (do
    (set! (.-download download-link) filename)
    (set! (.-href download-link) (.createObjectURL js/URL blob))
     (.click download-link)))))
process-svgs (fn process [svgs](if (seq svgs)
(let[img (js/Image.)
     canvas (js/document.createElement "canvas")
     context (.getContext canvas "2d")]
     (do (set! (.-onload img)
               (fn[]
               (do (.drawImage context img w h)
                   (.addFrame gif context)
                   (process (rest svgs)))))
         (set! (.-src img) (str->url (first svgs) "image/svg+xml"))))
(.render gif)))]
(process-svgs svg-strs)))

(def test-svg "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\"><rect y=\"0\" fill=\"white\" width=\"200\" x=\"0\" height=\"200\"></rect><path stroke=\"black\" fill=\"none\" stroke-width=\"1\" d=\"M 200, 100 L 50.00000000000002, 186.60254037844388 L 49.999999999999964, 13.397459621556166 L 199.99999999999997, 99.99999999999994 M 200, 100 L 100, 200 L 0, 100.00000000000001 L 99.99999999999999, 0 L 200, 99.99999999999997 M 200, 100 L 130.90169943749476, 195.10565162951536 L 19.098300562505273, 158.77852522924732 L 19.09830056250526, 41.2214747707527 L 130.90169943749473, 4.894348370484636 L 200, 99.99999999999997 M 200, 100 L 150, 186.60254037844385 L 50.00000000000002, 186.60254037844388 L 0, 100.00000000000004 L 49.99999999999996, 13.397459621556166 L 149.99999999999994, 13.397459621556095 L 200, 99.99999999999991 \"></path></svg>")
(def tst-svg "<svg xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\" width=\"400\" height=\"400\"><path stroke=\"black\" fill=\"none\" stroke-width=\"1\" d=\"M 373.2050807568877, 200.00000000000006 L 197.2507130038589, 301.5873015873017 L 197.25071300385883, 98.41269841269852 L 373.20508075688764, 200 M 197.25071300385886, 200.00000000000009 L 109.27352912734447, 250.79365079365087 L 109.27352912734445, 149.2063492063493 L 197.25071300385886, 200.00000000000006 M 109.27352912734447, 200.00000000000009 L 65.28493718908729, 225.39682539682548 L 65.28493718908729, 174.6031746031747 L 109.27352912734447, 200.00000000000006 M 65.28493718908729, 200.00000000000009 L 43.29064121995867, 212.6984126984128 L 43.29064121995867, 187.3015873015874 L 65.28493718908729, 200.00000000000009 M 43.29064121995867, 200.00000000000009 L 32.29349323539438, 206.34920634920644 L 32.29349323539438, 193.65079365079376 L 43.29064121995867, 200.00000000000009 M 32.29349323539438, 200.00000000000009 L 26.79491924311222, 203.17460317460328 L 26.79491924311222, 196.82539682539692 L 32.29349323539438, 200.00000000000009 M 43.29064121995867, 193.65079365079373 L 37.79206722767651, 196.82539682539692 L 37.79206722767651, 190.47619047619057 L 43.29064121995867, 193.65079365079373 M 43.29064121995867, 206.34920634920644 L 37.79206722767651, 209.5238095238096 L 37.79206722767651, 203.17460317460328 L 43.29064121995867, 206.34920634920644 M 65.28493718908729, 187.30158730158738 L 54.287789204522966, 193.65079365079373 L 54.287789204522966, 180.95238095238105 L 65.28493718908729, 187.30158730158738 M 54.287789204522966, 187.30158730158738 L 48.78921521224083, 190.47619047619057 L 48.78921521224083, 184.1269841269842 L 54.287789204522966, 187.30158730158738 M 65.28493718908729, 180.95238095238102 L 59.78636319680513, 184.1269841269842 L 59.78636319680513, 177.77777777777786 L 65.28493718908729, 180.95238095238102 M 65.28493718908729, 193.65079365079373 L 59.78636319680513, 196.82539682539692 L 59.78636319680513, 190.47619047619057 L 65.28493718908729, 193.65079365079373 M 65.28493718908729, 212.6984126984128 L 54.287789204522966, 219.04761904761912 L 54.287789204522966, 206.34920634920644 L 65.28493718908729, 212.69841269841277 M 54.287789204522966, 212.6984126984128 L 48.78921521224083, 215.87301587301596 L 48.78921521224083, 209.5238095238096 L 54.287789204522966, 212.69841269841277 M 65.28493718908729, 206.34920634920644 L 59.78636319680513, 209.5238095238096 L 59.78636319680513, 203.17460317460325 L 65.28493718908729, 206.34920634920644 M 65.28493718908729, 219.04761904761912 L 59.78636319680513, 222.2222222222223 L 59.78636319680513, 215.87301587301596 L 65.28493718908729, 219.04761904761912 M 109.27352912734445, 174.60317460317466 L 87.27923315821587, 187.30158730158738 L 87.27923315821585, 161.90476190476198 L 109.27352912734445, 174.60317460317466 M 87.27923315821585, 174.6031746031747 L 76.28208517365155, 180.95238095238102 L 76.28208517365155, 168.25396825396834 L 87.27923315821585, 174.60317460317466 M 76.28208517365155, 174.6031746031747 L 70.78351118136939, 177.77777777777786 L 70.78351118136939, 171.4285714285715 L 76.28208517365155, 174.60317460317466 M 87.27923315821585, 168.25396825396834 L 81.7806591659337, 171.4285714285715 L 81.7806591659337, 165.07936507936515 L 87.27923315821585, 168.2539682539683 M 87.27923315821587, 180.95238095238102 L 81.78065916593373, 184.1269841269842 L 81.78065916593373, 177.77777777777786 L 87.27923315821587, 180.95238095238102 M 109.27352912734445, 161.90476190476198 L 98.27638114278015, 168.2539682539683 L 98.27638114278015, 155.55555555555563 L 109.27352912734445, 161.90476190476198 M 98.27638114278015, 161.90476190476198 L 92.77780715049799, 165.07936507936515 L 92.77780715049799, 158.7301587301588 L 98.27638114278015, 161.90476190476198 M 109.27352912734445, 155.55555555555563 L 103.7749551350623, 158.7301587301588 L 103.77495513506227, 152.38095238095244 L 109.27352912734442, 155.55555555555563 M 109.27352912734445, 168.2539682539683 L 103.7749551350623, 171.4285714285715 L 103.7749551350623, 165.07936507936515 L 109.27352912734445, 168.2539682539683 M 109.27352912734447, 187.30158730158738 L 98.27638114278017, 193.65079365079373 L 98.27638114278017, 180.95238095238102 L 109.27352912734447, 187.30158730158738 M 98.27638114278017, 187.30158730158738 L 92.77780715049802, 190.47619047619054 L 92.77780715049802, 184.1269841269842 L 98.27638114278017, 187.30158730158738 M 109.27352912734447, 180.95238095238102 L 103.77495513506233, 184.12698412698418 L 103.7749551350623, 177.77777777777786 L 109.27352912734447, 180.95238095238102 M 109.27352912734447, 193.65079365079373 L 103.77495513506233, 196.8253968253969 L 103.77495513506233, 190.47619047619054 L 109.27352912734447, 193.65079365079373 M 109.27352912734447, 225.39682539682548 L 87.2792331582159, 238.0952380952382 L 87.27923315821587, 212.69841269841277 L 109.27352912734447, 225.39682539682548 M 87.27923315821587, 225.39682539682548 L 76.28208517365158, 231.74603174603183 L 76.28208517365158, 219.04761904761912 L 87.27923315821587, 225.39682539682548 M 76.28208517365158, 225.39682539682548 L 70.78351118136942, 228.57142857142864 L 70.78351118136942, 222.2222222222223 L 76.28208517365158, 225.39682539682548 M 87.27923315821587, 219.04761904761912 L 81.78065916593373, 222.22222222222229 L 81.78065916593373, 215.87301587301596 L 87.27923315821587, 219.04761904761912 M 87.2792331582159, 231.7460317460318 L 81.78065916593376, 234.920634920635 L 81.78065916593376, 228.57142857142864 L 87.2792331582159, 231.7460317460318 M 109.27352912734447, 212.69841269841277 L 98.27638114278017, 219.04761904761912 L 98.27638114278017, 206.3492063492064 L 109.27352912734447, 212.69841269841277 M 98.27638114278017, 212.69841269841277 L 92.77780715049802, 215.87301587301593 L 92.77780715049802, 209.5238095238096 L 98.27638114278017, 212.69841269841277 M 109.27352912734447, 206.3492063492064 L 103.77495513506233, 209.5238095238096 L 103.77495513506233, 203.17460317460325 L 109.27352912734447, 206.3492063492064 M 109.27352912734447, 219.04761904761912 L 103.77495513506233, 222.22222222222229 L 103.77495513506233, 215.87301587301593 L 109.27352912734447, 219.04761904761912 M 109.2735291273445, 238.09523809523816 L 98.2763811427802, 244.4444444444445 L 98.2763811427802, 231.7460317460318 L 109.2735291273445, 238.09523809523816 M 98.2763811427802, 238.09523809523816 L 92.77780715049805, 241.26984126984135 L 92.77780715049805, 234.920634920635 L 98.2763811427802, 238.09523809523816 M 109.2735291273445, 231.7460317460318 L 103.77495513506236, 234.920634920635 L 103.77495513506236, 228.57142857142864 L 109.2735291273445, 231.7460317460318 M 109.2735291273445, 244.4444444444445 L 103.77495513506236, 247.6190476190477 L 103.77495513506236, 241.26984126984132 L 109.2735291273445, 244.4444444444445 M 197.25071300385883, 149.20634920634927 L 153.26212106560166, 174.60317460317466 L 153.2621210656016, 123.80952380952388 L 197.25071300385883, 149.20634920634924 M 153.26212106560163, 149.20634920634927 L 131.26782509647302, 161.90476190476195 L 131.26782509647302, 136.50793650793656 L 153.26212106560163, 149.20634920634927 M 131.26782509647302, 149.20634920634927 L 120.27067711190873, 155.5555555555556 L 120.27067711190873, 142.85714285714292 L 131.26782509647302, 149.20634920634927 M 120.27067711190873, 149.20634920634927 L 114.77210311962658, 152.38095238095244 L 114.77210311962658, 146.03174603174608 L 120.27067711190873, 149.20634920634927 M 131.26782509647302, 142.85714285714292 L 125.76925110419087, 146.03174603174608 L 125.76925110419087, 139.68253968253975 L 131.26782509647302, 142.85714285714292 M 131.26782509647302, 155.5555555555556 L 125.7692511041909, 158.7301587301588 L 125.76925110419087, 152.38095238095244 L 131.26782509647302, 155.5555555555556 M 153.2621210656016, 136.50793650793656 L 142.2649730810373, 142.85714285714292 L 142.2649730810373, 130.15873015873024 L 153.2621210656016, 136.50793650793656 M 142.2649730810373, 136.50793650793656 L 136.76639908875518, 139.68253968253975 L 136.76639908875518, 133.33333333333337 L 142.2649730810373, 136.50793650793656 M 153.2621210656016, 130.15873015873024 L 147.76354707331947, 133.33333333333337 L 147.76354707331947, 126.98412698412703 L 153.2621210656016, 130.1587301587302 M 153.2621210656016, 142.85714285714292 L 147.76354707331947, 146.03174603174608 L 147.76354707331947, 139.68253968253975 L 153.2621210656016, 142.85714285714292 M 153.26212106560166, 161.90476190476195 L 142.26497308103734, 168.2539682539683 L 142.26497308103734, 155.5555555555556 L 153.26212106560166, 161.90476190476195 M 142.26497308103734, 161.90476190476195 L 136.7663990887552, 165.07936507936515 L 136.7663990887552, 158.7301587301588 L 142.26497308103734, 161.90476190476195 M 153.26212106560163, 155.5555555555556 L 147.7635470733195, 158.7301587301588 L 147.7635470733195, 152.38095238095244 L 153.26212106560163, 155.5555555555556 M 153.26212106560166, 168.2539682539683 L 147.7635470733195, 171.42857142857147 L 147.7635470733195, 165.07936507936512 L 153.26212106560166, 168.2539682539683 M 197.25071300385883, 123.80952380952387 L 175.25641703473022, 136.50793650793656 L 175.25641703473022, 111.11111111111116 L 197.2507130038588, 123.80952380952385 M 175.25641703473022, 123.80952380952387 L 164.25926905016593, 130.1587301587302 L 164.2592690501659, 117.46031746031751 L 175.25641703473022, 123.80952380952385 M 164.25926905016593, 123.80952380952387 L 158.76069505788377, 126.98412698412703 L 158.76069505788377, 120.63492063492068 L 164.25926905016593, 123.80952380952387 M 175.25641703473022, 117.46031746031751 L 169.75784304244806, 120.63492063492068 L 169.75784304244806, 114.28571428571433 L 175.25641703473022, 117.4603174603175 M 175.25641703473022, 130.1587301587302 L 169.7578430424481, 133.33333333333337 L 169.7578430424481, 126.98412698412703 L 175.25641703473022, 130.1587301587302 M 197.2507130038588, 111.11111111111116 L 186.2535650192945, 117.4603174603175 L 186.25356501929448, 104.7619047619048 L 197.2507130038588, 111.11111111111116 M 186.2535650192945, 111.11111111111116 L 180.75499102701235, 114.28571428571432 L 180.75499102701235, 107.93650793650797 L 186.2535650192945, 111.11111111111116 M 197.2507130038588, 104.7619047619048 L 191.75213901157665, 107.93650793650797 L 191.75213901157665, 101.58730158730164 L 197.2507130038588, 104.7619047619048 M 197.2507130038588, 117.4603174603175 L 191.75213901157665, 120.63492063492068 L 191.75213901157665, 114.28571428571432 L 197.2507130038588, 117.4603174603175 M 197.25071300385883, 136.50793650793653 L 186.2535650192945, 142.8571428571429 L 186.2535650192945, 130.1587301587302 L 197.25071300385883, 136.50793650793653 M 186.2535650192945, 136.50793650793656 L 180.75499102701238, 139.68253968253973 L 180.75499102701238, 133.33333333333337 L 186.2535650192945, 136.50793650793653 M 197.25071300385883, 130.1587301587302 L 191.75213901157667, 133.33333333333337 L 191.75213901157667, 126.98412698412702 L 197.25071300385883, 130.1587301587302 M 197.25071300385883, 142.8571428571429 L 191.75213901157667, 146.03174603174608 L 191.75213901157667, 139.68253968253973 L 197.25071300385883, 142.8571428571429 M 197.25071300385883, 174.60317460317464 L 175.25641703473025, 187.30158730158735 L 175.25641703473025, 161.90476190476195 L 197.25071300385883, 174.60317460317464 M 175.25641703473025, 174.60317460317466 L 164.25926905016595, 180.95238095238102 L 164.25926905016595, 168.2539682539683 L 175.25641703473025, 174.60317460317464 M 164.25926905016595, 174.60317460317466 L 158.7606950578838, 177.77777777777783 L 158.7606950578838, 171.42857142857147 L 164.25926905016595, 174.60317460317464 M 175.25641703473025, 168.2539682539683 L 169.7578430424481, 171.42857142857147 L 169.7578430424481, 165.07936507936512 L 175.25641703473025, 168.2539682539683 M 175.25641703473025, 180.952380952381 L 169.7578430424481, 184.12698412698418 L 169.7578430424481, 177.77777777777783 L 175.25641703473025, 180.952380952381 M 197.25071300385883, 161.90476190476195 L 186.25356501929454, 168.2539682539683 L 186.25356501929454, 155.5555555555556 L 197.25071300385883, 161.90476190476195 M 186.25356501929454, 161.90476190476195 L 180.7549910270124, 165.07936507936512 L 180.7549910270124, 158.7301587301588 L 186.25356501929454, 161.90476190476195 M 197.25071300385883, 155.5555555555556 L 191.75213901157667, 158.7301587301588 L 191.75213901157667, 152.3809523809524 L 197.25071300385883, 155.5555555555556 M 197.25071300385883, 168.2539682539683 L 191.7521390115767, 171.42857142857147 L 191.7521390115767, 165.07936507936512 L 197.25071300385883, 168.25396825396828 M 197.25071300385886, 187.30158730158735 L 186.25356501929457, 193.6507936507937 L 186.25356501929457, 180.952380952381 L 197.25071300385886, 187.30158730158735 M 186.25356501929457, 187.30158730158735 L 180.7549910270124, 190.47619047619054 L 180.7549910270124, 184.12698412698418 L 186.25356501929457, 187.30158730158735 M 197.25071300385883, 180.952380952381 L 191.7521390115767, 184.12698412698415 L 191.7521390115767, 177.77777777777783 L 197.25071300385883, 180.952380952381 M 197.25071300385886, 193.6507936507937 L 191.7521390115767, 196.82539682539687 L 191.7521390115767, 190.4761904761905 L 197.25071300385886, 193.65079365079367 M 197.2507130038589, 250.79365079365084 L 153.26212106560172, 276.19047619047626 L 153.2621210656017, 225.39682539682548 L 197.2507130038589, 250.79365079365084 M 153.2621210656017, 250.79365079365087 L 131.2678250964731, 263.49206349206355 L 131.2678250964731, 238.09523809523816 L 153.2621210656017, 250.79365079365084 M 131.2678250964731, 250.79365079365087 L 120.2706771119088, 257.1428571428572 L 120.2706771119088, 244.4444444444445 L 131.2678250964731, 250.79365079365084 M 120.2706771119088, 250.79365079365087 L 114.77210311962665, 253.96825396825403 L 114.77210311962665, 247.61904761904768 L 120.2706771119088, 250.79365079365087 M 131.2678250964731, 244.4444444444445 L 125.76925110419096, 247.61904761904768 L 125.76925110419096, 241.26984126984132 L 131.2678250964731, 244.4444444444445 M 131.2678250964731, 257.1428571428572 L 125.76925110419097, 260.31746031746036 L 125.76925110419096, 253.96825396825403 L 131.2678250964731, 257.1428571428572 M 153.2621210656017, 238.09523809523816 L 142.2649730810374, 244.4444444444445 L 142.2649730810374, 231.7460317460318 L 153.2621210656017, 238.09523809523813 M 142.2649730810374, 238.09523809523816 L 136.76639908875524, 241.26984126984132 L 136.76639908875524, 234.92063492063497 L 142.2649730810374, 238.09523809523816 M 153.2621210656017, 231.7460317460318 L 147.76354707331956, 234.92063492063497 L 147.76354707331953, 228.5714285714286 L 153.2621210656017, 231.7460317460318 M 153.2621210656017, 244.4444444444445 L 147.76354707331956, 247.61904761904768 L 147.76354707331956, 241.26984126984132 L 153.2621210656017, 244.4444444444445 M 153.26212106560172, 263.49206349206355 L 142.2649730810374, 269.8412698412699 L 142.2649730810374, 257.1428571428572 L 153.26212106560172, 263.49206349206355 M 142.2649730810374, 263.49206349206355 L 136.7663990887553, 266.66666666666674 L 136.7663990887553, 260.31746031746036 L 142.2649730810374, 263.49206349206355 M 153.26212106560172, 257.1428571428572 L 147.76354707331956, 260.31746031746036 L 147.76354707331956, 253.96825396825403 L 153.26212106560172, 257.1428571428572 M 153.26212106560172, 269.8412698412699 L 147.7635470733196, 273.01587301587307 L 147.7635470733196, 266.66666666666674 L 153.26212106560172, 269.8412698412699 M 197.2507130038589, 225.39682539682545 L 175.25641703473028, 238.09523809523813 L 175.25641703473028, 212.69841269841277 L 197.2507130038589, 225.39682539682545 M 175.25641703473028, 225.39682539682545 L 164.25926905016598, 231.7460317460318 L 164.25926905016598, 219.0476190476191 L 175.25641703473028, 225.39682539682545 M 164.25926905016598, 225.39682539682545 L 158.76069505788382, 228.5714285714286 L 158.76069505788382, 222.22222222222229 L 164.25926905016598, 225.39682539682545 M 175.25641703473028, 219.0476190476191 L 169.75784304244814, 222.22222222222229 L 169.75784304244812, 215.87301587301593 L 175.25641703473028, 219.0476190476191 M 175.25641703473028, 231.7460317460318 L 169.75784304244814, 234.92063492063497 L 169.75784304244814, 228.5714285714286 L 175.25641703473028, 231.7460317460318 M 197.25071300385886, 212.69841269841274 L 186.25356501929457, 219.0476190476191 L 186.25356501929457, 206.34920634920638 L 197.25071300385886, 212.69841269841274 M 186.25356501929457, 212.69841269841274 L 180.7549910270124, 215.8730158730159 L 180.7549910270124, 209.52380952380958 L 186.25356501929457, 212.69841269841274 M 197.25071300385886, 206.34920634920638 L 191.75213901157673, 209.52380952380958 L 191.75213901157673, 203.17460317460322 L 197.25071300385886, 206.34920634920638 M 197.25071300385886, 219.0476190476191 L 191.75213901157673, 222.22222222222226 L 191.75213901157673, 215.8730158730159 L 197.25071300385886, 219.0476190476191 M 197.2507130038589, 238.09523809523813 L 186.2535650192946, 244.44444444444449 L 186.2535650192946, 231.7460317460318 L 197.2507130038589, 238.09523809523813 M 186.2535650192946, 238.09523809523813 L 180.75499102701244, 241.26984126984132 L 180.75499102701244, 234.92063492063497 L 186.2535650192946, 238.09523809523813 M 197.2507130038589, 231.74603174603178 L 191.75213901157673, 234.92063492063497 L 191.75213901157673, 228.5714285714286 L 197.2507130038589, 231.74603174603178 M 197.2507130038589, 244.44444444444449 L 191.75213901157676, 247.61904761904765 L 191.75213901157676, 241.26984126984132 L 197.2507130038589, 244.44444444444449 M 197.25071300385892, 276.19047619047626 L 175.25641703473033, 288.8888888888889 L 175.25641703473033, 263.49206349206355 L 197.25071300385892, 276.19047619047626 M 175.25641703473033, 276.19047619047626 L 164.25926905016604, 282.5396825396826 L 164.25926905016604, 269.8412698412699 L 175.25641703473033, 276.19047619047626 M 164.25926905016604, 276.19047619047626 L 158.76069505788388, 279.3650793650794 L 158.76069505788388, 273.01587301587307 L 164.25926905016604, 276.19047619047626 M 175.25641703473033, 269.8412698412699 L 169.75784304244817, 273.01587301587307 L 169.75784304244817, 266.66666666666674 L 175.2564170347303, 269.8412698412699 M 175.25641703473033, 282.5396825396826 L 169.75784304244817, 285.7142857142858 L 169.75784304244817, 279.3650793650794 L 175.25641703473033, 282.5396825396826 M 197.25071300385892, 263.49206349206355 L 186.25356501929463, 269.8412698412699 L 186.25356501929463, 257.1428571428572 L 197.25071300385892, 263.49206349206355 M 186.25356501929463, 263.49206349206355 L 180.75499102701247, 266.66666666666674 L 180.75499102701247, 260.31746031746036 L 186.25356501929463, 263.49206349206355 M 197.2507130038589, 257.14285714285717 L 191.75213901157676, 260.31746031746036 L 191.75213901157676, 253.968253968254 L 197.2507130038589, 257.14285714285717 M 197.25071300385892, 269.8412698412699 L 191.7521390115768, 273.01587301587307 L 191.75213901157676, 266.66666666666674 L 197.25071300385892, 269.8412698412699 M 197.25071300385892, 288.8888888888889 L 186.25356501929463, 295.2380952380953 L 186.25356501929463, 282.5396825396826 L 197.25071300385892, 288.8888888888889 M 186.25356501929463, 288.8888888888889 L 180.75499102701247, 292.0634920634921 L 180.75499102701247, 285.7142857142858 L 186.25356501929463, 288.8888888888889 M 197.25071300385892, 282.5396825396826 L 191.7521390115768, 285.7142857142858 L 191.7521390115768, 279.3650793650794 L 197.25071300385892, 282.5396825396826 M 197.25071300385892, 295.2380952380953 L 191.7521390115768, 298.41269841269843 L 191.7521390115768, 292.0634920634921 L 197.25071300385892, 295.2380952380953 M 373.2050807568876, 98.41269841269843 L 285.22789688037324, 149.20634920634922 L 285.2278968803732, 47.61904761904768 L 373.2050807568876, 98.41269841269839 M 285.2278968803732, 98.41269841269845 L 241.239304942116, 123.80952380952384 L 241.23930494211598, 73.01587301587304 L 285.2278968803732, 98.41269841269842 M 241.239304942116, 98.41269841269845 L 219.2450089729874, 111.11111111111114 L 219.2450089729874, 85.71428571428575 L 241.239304942116, 98.41269841269843 M 219.2450089729874, 98.41269841269845 L 208.2478609884231, 104.7619047619048 L 208.2478609884231, 92.06349206349209 L 219.2450089729874, 98.41269841269845 M 208.2478609884231, 98.41269841269845 L 202.74928699614094, 101.58730158730162 L 202.74928699614094, 95.23809523809528 L 208.2478609884231, 98.41269841269845 M 219.2450089729874, 92.06349206349209 L 213.74643498070523, 95.23809523809527 L 213.74643498070523, 88.88888888888893 L 219.2450089729874, 92.06349206349209 M 219.2450089729874, 104.76190476190479 L 213.74643498070523, 107.93650793650797 L 213.74643498070523, 101.58730158730162 L 219.2450089729874, 104.76190476190479 M 241.23930494211598, 85.71428571428574 L 230.24215695755169, 92.06349206349209 L 230.24215695755169, 79.3650793650794 L 241.23930494211598, 85.71428571428574 M 230.24215695755169, 85.71428571428574 L 224.74358296526952, 88.88888888888891 L 224.74358296526952, 82.53968253968256 L 230.24215695755169, 85.71428571428574 M 241.23930494211598, 79.3650793650794 L 235.74073094983385, 82.53968253968256 L 235.74073094983385, 76.19047619047619 L 241.23930494211598, 79.3650793650794 M 241.239304942116, 92.06349206349209 L 235.74073094983385, 95.23809523809527 L 235.74073094983385, 88.88888888888891 L 241.239304942116, 92.06349206349208 M 241.239304942116, 111.11111111111114 L 230.2421569575517, 117.46031746031748 L 230.24215695755169, 104.76190476190479 L 241.239304942116, 111.11111111111113 M 230.24215695755169, 111.11111111111114 L 224.74358296526955, 114.2857142857143 L 224.74358296526955, 107.93650793650797 L 230.24215695755169, 111.11111111111114 M 241.239304942116, 104.76190476190479 L 235.74073094983385, 107.93650793650797 L 235.74073094983385, 101.58730158730162 L 241.239304942116, 104.76190476190479 M 241.239304942116, 117.46031746031748 L 235.74073094983385, 120.63492063492066 L 235.74073094983385, 114.2857142857143 L 241.239304942116, 117.46031746031748 M 285.2278968803732, 73.01587301587304 L 263.2336009112446, 85.71428571428572 L 263.2336009112446, 60.31746031746036 L 285.2278968803732, 73.01587301587304 M 263.2336009112446, 73.01587301587304 L 252.23645292668027, 79.3650793650794 L 252.23645292668027, 66.66666666666666 L 263.2336009112446, 73.01587301587304 M 252.23645292668027, 73.01587301587304 L 246.7378789343981, 76.19047619047619 L 246.7378789343981, 69.84126984126988 L 252.23645292668027, 73.01587301587304 M 263.2336009112446, 66.66666666666666 L 257.73502691896243, 69.84126984126988 L 257.73502691896243, 63.49206349206352 L 263.2336009112446, 66.66666666666666 M 263.2336009112446, 79.3650793650794 L 257.73502691896243, 82.53968253968256 L 257.73502691896243, 76.19047619047619 L 263.2336009112446, 79.3650793650794 M 285.2278968803732, 60.31746031746036 L 274.23074889580886, 66.66666666666666 L 274.23074889580886, 53.968253968253975 L 285.2278968803732, 60.3174603174603 M 274.23074889580886, 60.31746031746036 L 268.7321749035267, 63.49206349206352 L 268.7321749035267, 57.14285714285714 L 274.23074889580886, 60.3174603174603 M 285.2278968803732, 53.968253968253975 L 279.729322888091, 57.14285714285714 L 279.729322888091, 50.793650793650784 L 285.2278968803731, 53.968253968253975 M 285.2278968803732, 66.66666666666666 L 279.729322888091, 69.84126984126982 L 279.729322888091, 63.49206349206352 L 285.2278968803732, 66.66666666666666 M 285.2278968803732, 85.71428571428572 L 274.2307488958089, 92.06349206349208 L 274.2307488958089, 79.3650793650794 L 285.2278968803732, 85.71428571428572 M 274.2307488958089, 85.71428571428572 L 268.7321749035267, 88.88888888888891 L 268.7321749035267, 82.53968253968256 L 274.2307488958089, 85.71428571428572 M 285.2278968803732, 79.36507936507935 L 279.729322888091, 82.53968253968256 L 279.729322888091, 76.19047619047619 L 285.2278968803732, 79.36507936507935 M 285.2278968803732, 92.06349206349208 L 279.729322888091, 95.23809523809526 L 279.729322888091, 88.8888888888889 L 285.2278968803732, 92.06349206349206 M 285.22789688037324, 123.80952380952382 L 263.2336009112446, 136.50793650793653 L 263.2336009112446, 111.11111111111114 L 285.22789688037324, 123.80952380952382 M 263.2336009112446, 123.80952380952384 L 252.2364529266803, 130.15873015873018 L 252.2364529266803, 117.46031746031748 L 263.2336009112446, 123.80952380952382 M 252.2364529266803, 123.80952380952384 L 246.73787893439817, 126.984126984127 L 246.73787893439817, 120.63492063492066 L 252.2364529266803, 123.80952380952382 M 263.2336009112446, 117.46031746031748 L 257.73502691896243, 120.63492063492065 L 257.73502691896243, 114.2857142857143 L 263.2336009112446, 117.46031746031748 M 263.2336009112446, 130.15873015873018 L 257.7350269189625, 133.33333333333334 L 257.7350269189625, 126.984126984127 L 263.2336009112446, 130.15873015873018 M 285.2278968803732, 111.11111111111113 L 274.2307488958089, 117.46031746031748 L 274.2307488958089, 104.76190476190477 L 285.2278968803732, 111.11111111111111 M 274.2307488958089, 111.11111111111113 L 268.73217490352675, 114.2857142857143 L 268.73217490352675, 107.93650793650797 L 274.2307488958089, 111.11111111111113 M 285.2278968803732, 104.76190476190477 L 279.729322888091, 107.93650793650795 L 279.729322888091, 101.58730158730161 L 285.2278968803732, 104.76190476190477 M 285.22789688037324, 117.46031746031747 L 279.7293228880911, 120.63492063492065 L 279.7293228880911, 114.2857142857143 L 285.22789688037324, 117.46031746031747 M 285.22789688037324, 136.50793650793653 L 274.2307488958089, 142.8571428571429 L 274.2307488958089, 130.15873015873018 L 285.22789688037324, 136.5079365079365 M 274.2307488958089, 136.50793650793653 L 268.73217490352675, 139.6825396825397 L 268.73217490352675, 133.33333333333334 L 274.2307488958089, 136.50793650793653 M 285.22789688037324, 130.15873015873018 L 279.7293228880911, 133.33333333333334 L 279.7293228880911, 126.984126984127 L 285.22789688037324, 130.15873015873018 M 285.22789688037324, 142.85714285714286 L 279.7293228880911, 146.03174603174605 L 279.7293228880911, 139.6825396825397 L 285.22789688037324, 142.85714285714286 M 373.2050807568876, 47.61904761904762 L 329.2164888186304, 73.01587301587304 L 329.21648881863035, 22.2222222222222 L 373.2050807568876, 47.61904761904762 M 329.2164888186304, 47.61904761904762 L 307.22219284950177, 60.3174603174603 L 307.22219284950177, 34.92063492063494 L 329.2164888186304, 47.61904761904762 M 307.22219284950177, 47.61904761904762 L 296.22504486493744, 53.968253968253975 L 296.22504486493744, 41.269841269841265 L 307.22219284950177, 47.61904761904762 M 296.22504486493744, 47.61904761904762 L 290.7264708726553, 50.793650793650784 L 290.7264708726553, 44.44444444444446 L 296.22504486493744, 47.61904761904762 M 307.22219284950177, 41.269841269841265 L 301.7236188572196, 44.44444444444446 L 301.7236188572196, 38.0952380952381 L 307.22219284950177, 41.269841269841265 M 307.22219284950177, 53.968253968253975 L 301.7236188572196, 57.14285714285714 L 301.7236188572196, 50.793650793650784 L 307.22219284950177, 53.968253968253975 M 329.21648881863035, 34.92063492063494 L 318.21934083406603, 41.269841269841265 L 318.21934083406603, 28.571428571428584 L 329.21648881863035, 34.92063492063488 M 318.21934083406603, 34.92063492063494 L 312.72076684178387, 38.0952380952381 L 312.72076684178387, 31.74603174603172 L 318.21934083406603, 34.92063492063488 M 329.21648881863035, 28.571428571428584 L 323.7179148263482, 31.74603174603172 L 323.7179148263482, 25.396825396825363 L 329.21648881863035, 28.571428571428584 M 329.21648881863035, 41.269841269841265 L 323.7179148263482, 44.44444444444446 L 323.7179148263482, 38.0952380952381 L 329.21648881863035, 41.269841269841265 M 329.2164888186304, 60.3174603174603 L 318.2193408340661, 66.66666666666666 L 318.2193408340661, 53.968253968253975 L 329.2164888186304, 60.3174603174603 M 318.2193408340661, 60.3174603174603 L 312.7207668417839, 63.49206349206352 L 312.7207668417839, 57.14285714285714 L 318.2193408340661, 60.3174603174603 M 329.2164888186304, 53.968253968253975 L 323.7179148263482, 57.14285714285714 L 323.7179148263482, 50.793650793650784 L 329.2164888186304, 53.96825396825395 M 329.2164888186304, 66.66666666666666 L 323.7179148263482, 69.84126984126982 L 323.7179148263482, 63.49206349206352 L 329.2164888186304, 66.66666666666666 M 373.2050807568876, 22.2222222222222 L 351.21078478775894, 34.92063492063488 L 351.21078478775894, 9.523809523809518 L 373.2050807568875, 22.2222222222222 M 351.21078478775894, 22.2222222222222 L 340.2136368031946, 28.571428571428584 L 340.2136368031946, 15.873015873015845 L 351.21078478775894, 22.2222222222222 M 340.2136368031946, 22.2222222222222 L 334.7150628109125, 25.396825396825363 L 334.7150628109125, 19.047619047619037 L 340.2136368031946, 22.2222222222222 M 351.21078478775894, 15.873015873015845 L 345.7122107954768, 19.047619047619037 L 345.7122107954768, 12.698412698412682 L 351.21078478775894, 15.873015873015845 M 351.21078478775894, 28.571428571428584 L 345.7122107954768, 31.74603174603172 L 345.7122107954768, 25.396825396825363 L 351.21078478775894, 28.571428571428584 M 373.2050807568875, 9.523809523809518 L 362.2079327723232, 15.873015873015845 L 362.2079327723232, 3.1746031746031633 L 373.2050807568875, 9.523809523809518 M 362.2079327723232, 9.523809523809518 L 356.70935878004104, 12.698412698412682 L 356.70935878004104, 6.349206349206327 L 362.2079327723232, 9.523809523809518 M 373.2050807568875, 3.1746031746031633 L 367.70650676460536, 6.349206349206327 L 367.70650676460536, 0 L 373.2050807568875, 3.1746031746031633 M 373.2050807568875, 15.873015873015845 L 367.70650676460536, 19.047619047619037 L 367.70650676460536, 12.698412698412682 L 373.2050807568875, 15.873015873015845 M 373.2050807568876, 34.92063492063488 L 362.20793277232326, 41.269841269841265 L 362.20793277232326, 28.571428571428584 L 373.2050807568876, 34.92063492063488 M 362.20793277232326, 34.92063492063488 L 356.7093587800411, 38.0952380952381 L 356.7093587800411, 31.74603174603172 L 362.20793277232326, 34.92063492063488 M 373.2050807568876, 28.571428571428584 L 367.70650676460536, 31.74603174603172 L 367.70650676460536, 25.396825396825363 L 373.2050807568876, 28.571428571428584 M 373.2050807568876, 41.269841269841265 L 367.70650676460536, 44.4444444444444 L 367.70650676460536, 38.0952380952381 L 373.2050807568876, 41.269841269841265 M 373.2050807568876, 73.01587301587298 L 351.21078478775894, 85.71428571428571 L 351.21078478775894, 60.3174603174603 L 373.2050807568876, 73.01587301587298 M 351.21078478775894, 73.01587301587304 L 340.2136368031947, 79.36507936507935 L 340.2136368031947, 66.66666666666666 L 351.21078478775894, 73.01587301587298 M 340.2136368031947, 73.01587301587304 L 334.7150628109125, 76.19047619047619 L 334.7150628109125, 69.84126984126982 L 340.2136368031947, 73.01587301587298 M 351.21078478775894, 66.66666666666666 L 345.71221079547684, 69.84126984126982 L 345.71221079547684, 63.492063492063465 L 351.21078478775894, 66.66666666666666 M 351.21078478775894, 79.36507936507935 L 345.71221079547684, 82.5396825396825 L 345.71221079547684, 76.19047619047619 L 351.21078478775894, 79.36507936507935 M 373.2050807568876, 60.3174603174603 L 362.20793277232326, 66.66666666666666 L 362.20793277232326, 53.96825396825395 L 373.2050807568876, 60.3174603174603 M 362.20793277232326, 60.3174603174603 L 356.70935878004116, 63.492063492063465 L 356.70935878004116, 57.14285714285714 L 362.20793277232326, 60.3174603174603 M 373.2050807568876, 53.96825396825395 L 367.7065067646054, 57.14285714285714 L 367.7065067646054, 50.793650793650784 L 373.2050807568876, 53.96825396825395 M 373.2050807568876, 66.66666666666666 L 367.7065067646054, 69.84126984126982 L 367.7065067646054, 63.492063492063465 L 373.2050807568876, 66.66666666666666 M 373.2050807568876, 85.71428571428571 L 362.20793277232326, 92.06349206349205 L 362.20793277232326, 79.36507936507935 L 373.2050807568876, 85.71428571428571 M 362.20793277232326, 85.71428571428571 L 356.70935878004116, 88.88888888888889 L 356.70935878004116, 82.5396825396825 L 362.20793277232326, 85.71428571428571 M 373.2050807568876, 79.36507936507935 L 367.7065067646054, 82.5396825396825 L 367.7065067646054, 76.19047619047619 L 373.2050807568876, 79.36507936507935 M 373.2050807568876, 92.06349206349205 L 367.7065067646054, 95.23809523809523 L 367.7065067646054, 88.88888888888887 L 373.2050807568876, 92.06349206349205 M 373.2050807568876, 149.20634920634922 L 329.2164888186304, 174.6031746031746 L 329.2164888186304, 123.80952380952382 L 373.2050807568876, 149.2063492063492 M 329.2164888186304, 149.20634920634922 L 307.2221928495018, 161.90476190476193 L 307.2221928495018, 136.5079365079365 L 329.2164888186304, 149.20634920634922 M 307.2221928495018, 149.20634920634922 L 296.2250448649375, 155.55555555555557 L 296.2250448649375, 142.85714285714286 L 307.2221928495018, 149.20634920634922 M 296.2250448649375, 149.20634920634922 L 290.72647087265534, 152.3809523809524 L 290.72647087265534, 146.03174603174602 L 296.2250448649375, 149.20634920634922 M 307.2221928495018, 142.85714285714286 L 301.72361885721966, 146.03174603174602 L 301.72361885721966, 139.6825396825397 L 307.2221928495018, 142.85714285714286 M 307.2221928495018, 155.55555555555557 L 301.72361885721966, 158.73015873015873 L 301.72361885721966, 152.38095238095238 L 307.2221928495018, 155.55555555555554 M 329.2164888186304, 136.5079365079365 L 318.2193408340661, 142.85714285714286 L 318.2193408340661, 130.15873015873018 L 329.2164888186304, 136.5079365079365 M 318.2193408340661, 136.5079365079365 L 312.720766841784, 139.6825396825397 L 312.720766841784, 133.33333333333331 L 318.2193408340661, 136.5079365079365 M 329.2164888186304, 130.15873015873018 L 323.71791482634825, 133.33333333333331 L 323.71791482634825, 126.98412698412697 L 329.2164888186304, 130.15873015873018 M 329.2164888186304, 142.85714285714286 L 323.71791482634825, 146.03174603174602 L 323.71791482634825, 139.6825396825397 L 329.2164888186304, 142.85714285714286 M 329.2164888186304, 161.9047619047619 L 318.2193408340661, 168.25396825396825 L 318.2193408340661, 155.55555555555557 L 329.2164888186304, 161.9047619047619 M 318.2193408340661, 161.9047619047619 L 312.720766841784, 165.0793650793651 L 312.720766841784, 158.73015873015873 L 318.2193408340661, 161.9047619047619 M 329.2164888186304, 155.55555555555554 L 323.71791482634825, 158.73015873015873 L 323.71791482634825, 152.38095238095238 L 329.2164888186304, 155.55555555555554 M 329.2164888186304, 168.25396825396825 L 323.7179148263483, 171.42857142857144 L 323.7179148263483, 165.07936507936506 L 329.2164888186304, 168.25396825396825 M 373.2050807568876, 123.8095238095238 L 351.21078478775905, 136.5079365079365 L 351.210784787759, 111.11111111111111 L 373.2050807568876, 123.8095238095238 M 351.21078478775905, 123.80952380952381 L 340.21363680319473, 130.15873015873015 L 340.21363680319473, 117.46031746031746 L 351.21078478775905, 123.8095238095238 M 340.21363680319473, 123.80952380952381 L 334.71506281091257, 126.98412698412697 L 334.71506281091257, 120.63492063492065 L 340.21363680319473, 123.8095238095238 M 351.210784787759, 117.46031746031746 L 345.71221079547684, 120.63492063492063 L 345.71221079547684, 114.28571428571428 L 351.210784787759, 117.46031746031746 M 351.21078478775905, 130.15873015873015 L 345.71221079547684, 133.33333333333331 L 345.71221079547684, 126.98412698412697 L 351.21078478775905, 130.15873015873015 M 373.2050807568876, 111.1111111111111 L 362.20793277232326, 117.46031746031746 L 362.20793277232326, 104.76190476190474 L 373.2050807568876, 111.11111111111109 M 362.20793277232326, 111.1111111111111 L 356.70935878004116, 114.28571428571428 L 356.70935878004116, 107.93650793650794 L 362.20793277232326, 111.11111111111109 M 373.2050807568876, 104.76190476190474 L 367.7065067646055, 107.93650793650792 L 367.7065067646055, 101.58730158730157 L 373.2050807568876, 104.76190476190474 M 373.2050807568876, 117.46031746031744 L 367.7065067646055, 120.63492063492062 L 367.7065067646055, 114.28571428571428 L 373.2050807568876, 117.46031746031744 M 373.2050807568876, 136.5079365079365 L 362.2079327723233, 142.85714285714283 L 362.2079327723233, 130.15873015873015 L 373.2050807568876, 136.5079365079365 M 362.2079327723233, 136.5079365079365 L 356.70935878004116, 139.68253968253967 L 356.70935878004116, 133.33333333333331 L 362.2079327723233, 136.5079365079365 M 373.2050807568876, 130.15873015873012 L 367.7065067646055, 133.33333333333331 L 367.7065067646055, 126.98412698412697 L 373.2050807568876, 130.15873015873012 M 373.2050807568876, 142.85714285714283 L 367.7065067646055, 146.03174603174602 L 367.7065067646055, 139.68253968253967 L 373.2050807568876, 142.85714285714283 M 373.20508075688764, 174.6031746031746 L 351.21078478775905, 187.30158730158732 L 351.21078478775905, 161.9047619047619 L 373.20508075688764, 174.60317460317458 M 351.21078478775905, 174.6031746031746 L 340.21363680319473, 180.95238095238096 L 340.21363680319473, 168.25396825396825 L 351.21078478775905, 174.6031746031746 M 340.21363680319473, 174.6031746031746 L 334.7150628109126, 177.77777777777777 L 334.7150628109126, 171.42857142857144 L 340.21363680319473, 174.6031746031746 M 351.21078478775905, 168.25396825396825 L 345.7122107954769, 171.42857142857142 L 345.71221079547684, 165.07936507936506 L 351.21078478775905, 168.25396825396825 M 351.21078478775905, 180.95238095238093 L 345.7122107954769, 184.12698412698413 L 345.7122107954769, 177.77777777777777 L 351.21078478775905, 180.95238095238093 M 373.2050807568876, 161.9047619047619 L 362.2079327723233, 168.25396825396825 L 362.2079327723233, 155.55555555555554 L 373.2050807568876, 161.9047619047619 M 362.2079327723233, 161.9047619047619 L 356.70935878004116, 165.07936507936506 L 356.70935878004116, 158.73015873015873 L 362.2079327723233, 161.9047619047619 M 373.2050807568876, 155.55555555555554 L 367.7065067646055, 158.73015873015873 L 367.7065067646055, 152.38095238095235 L 373.2050807568876, 155.55555555555554 M 373.20508075688764, 168.25396825396825 L 367.7065067646055, 171.42857142857142 L 367.7065067646055, 165.07936507936506 L 373.20508075688764, 168.25396825396822 M 373.20508075688764, 187.3015873015873 L 362.2079327723234, 193.65079365079364 L 362.2079327723234, 180.95238095238093 L 373.20508075688764, 187.3015873015873 M 362.2079327723234, 187.3015873015873 L 356.70935878004116, 190.47619047619045 L 356.70935878004116, 184.12698412698413 L 362.2079327723234, 187.3015873015873 M 373.20508075688764, 180.95238095238093 L 367.7065067646055, 184.12698412698413 L 367.7065067646055, 177.77777777777777 L 373.20508075688764, 180.95238095238093 M 373.20508075688764, 193.65079365079364 L 367.7065067646055, 196.8253968253968 L 367.7065067646055, 190.47619047619045 L 373.20508075688764, 193.65079365079364 M 373.2050807568877, 301.5873015873016 L 285.22789688037335, 352.3809523809524 L 285.22789688037335, 250.79365079365084 L 373.2050807568877, 301.58730158730157 M 285.22789688037335, 301.5873015873016 L 241.23930494211612, 326.984126984127 L 241.23930494211612, 276.19047619047626 L 285.22789688037335, 301.5873015873016 M 241.23930494211612, 301.5873015873016 L 219.24500897298753, 314.28571428571433 L 219.24500897298753, 288.8888888888889 L 241.23930494211612, 301.5873015873016 M 219.24500897298753, 301.5873015873016 L 208.24786098842324, 307.93650793650795 L 208.24786098842324, 295.2380952380953 L 219.24500897298753, 301.5873015873016 M 208.24786098842324, 301.5873015873016 L 202.74928699614108, 304.7619047619048 L 202.74928699614108, 298.41269841269843 L 208.24786098842324, 301.5873015873016 M 219.24500897298753, 295.2380952380953 L 213.74643498070537, 298.41269841269843 L 213.74643498070537, 292.0634920634921 L 219.24500897298753, 295.2380952380953 M 219.24500897298753, 307.93650793650795 L 213.74643498070537, 311.11111111111114 L 213.74643498070537, 304.7619047619048 L 219.24500897298753, 307.93650793650795 M 241.23930494211612, 288.8888888888889 L 230.24215695755183, 295.2380952380953 L 230.24215695755183, 282.5396825396826 L 241.23930494211612, 288.8888888888889 M 230.24215695755183, 288.8888888888889 L 224.74358296526967, 292.0634920634921 L 224.74358296526967, 285.7142857142858 L 230.24215695755183, 288.8888888888889 M 241.23930494211612, 282.5396825396826 L 235.74073094983396, 285.7142857142858 L 235.74073094983396, 279.3650793650794 L 241.23930494211612, 282.5396825396826 M 241.23930494211612, 295.2380952380953 L 235.740730949834, 298.41269841269843 L 235.740730949834, 292.0634920634921 L 241.23930494211612, 295.2380952380953 M 241.23930494211612, 314.28571428571433 L 230.24215695755186, 320.63492063492066 L 230.24215695755183, 307.93650793650795 L 241.23930494211612, 314.28571428571433 M 230.24215695755183, 314.28571428571433 L 224.7435829652697, 317.46031746031747 L 224.7435829652697, 311.11111111111114 L 230.24215695755183, 314.28571428571433 M 241.23930494211612, 307.93650793650795 L 235.740730949834, 311.11111111111114 L 235.740730949834, 304.7619047619048 L 241.23930494211612, 307.93650793650795 M 241.23930494211615, 320.63492063492066 L 235.74073094983402, 323.80952380952385 L 235.74073094983402, 317.46031746031747 L 241.23930494211615, 320.63492063492066 M 285.22789688037335, 276.1904761904762 L 263.2336009112447, 288.8888888888889 L 263.2336009112447, 263.4920634920635 L 285.2278968803733, 276.1904761904762 M 263.2336009112447, 276.1904761904762 L 252.2364529266804, 282.5396825396826 L 252.2364529266804, 269.8412698412699 L 263.2336009112447, 276.1904761904762 M 252.2364529266804, 276.1904761904762 L 246.73787893439825, 279.3650793650794 L 246.73787893439825, 273.015873015873 L 252.2364529266804, 276.1904761904762 M 263.2336009112447, 269.8412698412699 L 257.73502691896255, 273.015873015873 L 257.73502691896255, 266.6666666666667 L 263.2336009112447, 269.8412698412699 M 263.2336009112447, 282.5396825396826 L 257.7350269189626, 285.7142857142857 L 257.7350269189626, 279.3650793650794 L 263.2336009112447, 282.5396825396826 M 285.2278968803733, 263.4920634920635 L 274.23074889580903, 269.8412698412699 L 274.23074889580903, 257.14285714285717 L 285.2278968803733, 263.4920634920635 M 274.23074889580903, 263.4920634920635 L 268.73217490352687, 266.6666666666667 L 268.73217490352687, 260.31746031746036 L 274.23074889580903, 263.4920634920635 M 285.2278968803733, 257.14285714285717 L 279.72932288809113, 260.31746031746036 L 279.72932288809113, 253.96825396825398 L 285.2278968803733, 257.14285714285717 M 285.2278968803733, 269.8412698412699 L 279.72932288809113, 273.015873015873 L 279.72932288809113, 266.6666666666667 L 285.2278968803733, 269.8412698412699 M 285.22789688037335, 288.8888888888889 L 274.23074889580903, 295.2380952380953 L 274.23074889580903, 282.5396825396826 L 285.22789688037335, 288.8888888888889 M 274.23074889580903, 288.8888888888889 L 268.73217490352687, 292.0634920634921 L 268.73217490352687, 285.7142857142857 L 274.23074889580903, 288.8888888888889 M 285.22789688037335, 282.53968253968253 L 279.7293228880912, 285.7142857142857 L 279.7293228880912, 279.3650793650794 L 285.22789688037335, 282.53968253968253 M 285.22789688037335, 295.2380952380953 L 279.7293228880912, 298.41269841269843 L 279.7293228880912, 292.06349206349205 L 285.22789688037335, 295.23809523809524 M 285.22789688037335, 326.984126984127 L 263.23360091124476, 339.6825396825397 L 263.23360091124476, 314.28571428571433 L 285.22789688037335, 326.984126984127 M 263.23360091124476, 326.984126984127 L 252.23645292668044, 333.33333333333337 L 252.23645292668044, 320.63492063492066 L 263.23360091124476, 326.984126984127 M 252.23645292668044, 326.984126984127 L 246.7378789343983, 330.1587301587302 L 246.7378789343983, 323.80952380952385 L 252.23645292668044, 326.984126984127 M 263.23360091124476, 320.63492063492066 L 257.7350269189626, 323.8095238095238 L 257.7350269189626, 317.46031746031747 L 263.23360091124476, 320.63492063492066 M 263.23360091124476, 333.33333333333337 L 257.7350269189626, 336.5079365079365 L 257.7350269189626, 330.1587301587302 L 263.23360091124476, 333.33333333333337 M 285.22789688037335, 314.28571428571433 L 274.23074889580903, 320.63492063492066 L 274.23074889580903, 307.93650793650795 L 285.22789688037335, 314.2857142857143 M 274.23074889580903, 314.28571428571433 L 268.7321749035269, 317.46031746031747 L 268.7321749035269, 311.11111111111114 L 274.23074889580903, 314.28571428571433 M 285.22789688037335, 307.93650793650795 L 279.7293228880912, 311.11111111111114 L 279.7293228880912, 304.7619047619048 L 285.22789688037335, 307.93650793650795 M 285.22789688037335, 320.63492063492066 L 279.7293228880912, 323.8095238095238 L 279.7293228880912, 317.46031746031747 L 285.22789688037335, 320.63492063492066 M 285.22789688037335, 339.6825396825397 L 274.23074889580903, 346.031746031746 L 274.23074889580903, 333.33333333333337 L 285.22789688037335, 339.6825396825397 M 274.23074889580903, 339.6825396825397 L 268.7321749035269, 342.8571428571429 L 268.7321749035269, 336.5079365079365 L 274.23074889580903, 339.6825396825397 M 285.22789688037335, 333.33333333333337 L 279.7293228880912, 336.5079365079365 L 279.7293228880912, 330.1587301587302 L 285.22789688037335, 333.33333333333337 M 285.22789688037335, 346.031746031746 L 279.72932288809125, 349.2063492063492 L 279.72932288809125, 342.8571428571429 L 285.22789688037335, 346.031746031746 M 373.2050807568877, 250.7936507936508 L 329.2164888186305, 276.1904761904762 L 329.21648881863047, 225.39682539682542 L 373.2050807568877, 250.79365079365078 M 329.2164888186305, 250.7936507936508 L 307.2221928495019, 263.4920634920635 L 307.2221928495019, 238.0952380952381 L 329.2164888186305, 250.79365079365078 M 307.2221928495019, 250.7936507936508 L 296.2250448649376, 257.14285714285717 L 296.2250448649376, 244.44444444444446 L 307.2221928495019, 250.7936507936508 M 296.2250448649376, 250.7936507936508 L 290.72647087265545, 253.96825396825398 L 290.72647087265545, 247.61904761904765 L 296.2250448649376, 250.7936507936508 M 307.2221928495019, 244.44444444444446 L 301.7236188572198, 247.61904761904765 L 301.7236188572198, 241.26984126984127 L 307.2221928495019, 244.44444444444446 M 307.2221928495019, 257.14285714285717 L 301.7236188572198, 260.3174603174603 L 301.7236188572198, 253.96825396825398 L 307.2221928495019, 257.14285714285717 M 329.21648881863047, 238.0952380952381 L 318.2193408340662, 244.44444444444446 L 318.2193408340662, 231.74603174603175 L 329.21648881863047, 238.0952380952381 M 318.2193408340662, 238.0952380952381 L 312.72076684178404, 241.26984126984127 L 312.72076684178404, 234.92063492063494 L 318.2193408340662, 238.0952380952381 M 329.21648881863047, 231.74603174603175 L 323.7179148263483, 234.92063492063494 L 323.7179148263483, 228.57142857142856 L 329.21648881863047, 231.74603174603175 M 329.2164888186305, 244.44444444444446 L 323.71791482634836, 247.61904761904762 L 323.71791482634836, 241.26984126984127 L 329.2164888186305, 244.44444444444446 M 329.2164888186305, 263.4920634920635 L 318.2193408340662, 269.8412698412699 L 318.2193408340662, 257.14285714285717 L 329.2164888186305, 263.4920634920635 M 318.2193408340662, 263.4920634920635 L 312.72076684178404, 266.6666666666667 L 312.72076684178404, 260.3174603174603 L 318.2193408340662, 263.4920634920635 M 329.2164888186305, 257.14285714285717 L 323.71791482634836, 260.3174603174603 L 323.71791482634836, 253.96825396825398 L 329.2164888186305, 257.1428571428571 M 329.2164888186305, 269.8412698412699 L 323.71791482634836, 273.015873015873 L 323.71791482634836, 266.6666666666667 L 329.2164888186305, 269.8412698412698 M 373.2050807568877, 225.3968253968254 L 351.21078478775905, 238.0952380952381 L 351.21078478775905, 212.69841269841268 L 373.2050807568877, 225.3968253968254 M 351.21078478775905, 225.3968253968254 L 340.21363680319473, 231.74603174603175 L 340.21363680319473, 219.04761904761904 L 351.21078478775905, 225.3968253968254 M 340.21363680319473, 225.3968253968254 L 334.7150628109126, 228.57142857142856 L 334.7150628109126, 222.22222222222223 L 340.21363680319473, 225.3968253968254 M 351.21078478775905, 219.04761904761904 L 345.71221079547695, 222.22222222222223 L 345.71221079547695, 215.87301587301587 L 351.21078478775905, 219.04761904761904 M 351.21078478775905, 231.74603174603175 L 345.71221079547695, 234.92063492063494 L 345.71221079547695, 228.57142857142856 L 351.21078478775905, 231.74603174603175 M 373.2050807568877, 212.69841269841268 L 362.2079327723234, 219.04761904761904 L 362.2079327723234, 206.34920634920633 L 373.2050807568877, 212.69841269841268 M 362.2079327723234, 212.69841269841268 L 356.7093587800412, 215.87301587301587 L 356.7093587800412, 209.52380952380952 L 362.2079327723234, 212.69841269841268 M 373.2050807568877, 206.34920634920633 L 367.7065067646055, 209.52380952380952 L 367.7065067646055, 203.17460317460316 L 373.2050807568877, 206.34920634920633 M 373.2050807568877, 219.04761904761904 L 367.7065067646055, 222.22222222222223 L 367.7065067646055, 215.87301587301587 L 373.2050807568877, 219.04761904761904 M 373.2050807568877, 238.09523809523807 L 362.2079327723234, 244.44444444444443 L 362.2079327723234, 231.74603174603175 L 373.2050807568877, 238.09523809523807 M 362.2079327723234, 238.0952380952381 L 356.7093587800412, 241.26984126984127 L 356.7093587800412, 234.9206349206349 L 362.2079327723234, 238.09523809523807 M 373.2050807568877, 231.74603174603175 L 367.7065067646055, 234.9206349206349 L 367.7065067646055, 228.57142857142856 L 373.2050807568877, 231.74603174603175 M 373.2050807568877, 244.44444444444443 L 367.70650676460554, 247.61904761904762 L 367.70650676460554, 241.26984126984127 L 373.2050807568877, 244.44444444444443 M 373.2050807568877, 276.1904761904762 L 351.2107847877591, 288.8888888888889 L 351.2107847877591, 263.4920634920635 L 373.2050807568877, 276.19047619047615 M 351.2107847877591, 276.1904761904762 L 340.21363680319485, 282.53968253968253 L 340.21363680319485, 269.8412698412698 L 351.2107847877591, 276.1904761904762 M 340.21363680319485, 276.1904761904762 L 334.7150628109127, 279.36507936507934 L 334.7150628109127, 273.015873015873 L 340.21363680319485, 276.1904761904762 M 351.2107847877591, 269.8412698412698 L 345.71221079547695, 273.015873015873 L 345.71221079547695, 266.6666666666667 L 351.2107847877591, 269.8412698412698 M 351.2107847877591, 282.53968253968253 L 345.71221079547695, 285.7142857142857 L 345.71221079547695, 279.36507936507934 L 351.2107847877591, 282.53968253968253 M 373.2050807568877, 263.4920634920635 L 362.2079327723234, 269.8412698412698 L 362.2079327723234, 257.1428571428571 L 373.2050807568877, 263.4920634920635 M 362.2079327723234, 263.4920634920635 L 356.70935878004127, 266.66666666666663 L 356.70935878004127, 260.3174603174603 L 362.2079327723234, 263.4920634920635 M 373.2050807568877, 257.1428571428571 L 367.70650676460554, 260.3174603174603 L 367.70650676460554, 253.96825396825398 L 373.2050807568877, 257.1428571428571 M 373.2050807568877, 269.8412698412698 L 367.7065067646056, 273.015873015873 L 367.7065067646056, 266.66666666666663 L 373.2050807568877, 269.8412698412698 M 373.2050807568877, 288.8888888888889 L 362.20793277232343, 295.23809523809524 L 362.20793277232343, 282.53968253968253 L 373.2050807568877, 288.8888888888889 M 362.20793277232343, 288.8888888888889 L 356.70935878004127, 292.06349206349205 L 356.70935878004127, 285.7142857142857 L 362.20793277232343, 288.8888888888889 M 373.2050807568877, 282.53968253968253 L 367.7065067646056, 285.71428571428567 L 367.7065067646056, 279.36507936507934 L 373.2050807568877, 282.53968253968253 M 373.2050807568877, 295.23809523809524 L 367.7065067646056, 298.41269841269843 L 367.7065067646056, 292.06349206349205 L 373.2050807568877, 295.23809523809524 M 373.2050807568878, 352.3809523809524 L 329.2164888186306, 377.7777777777778 L 329.2164888186306, 326.984126984127 L 373.2050807568878, 352.3809523809524 M 329.2164888186306, 352.3809523809524 L 307.222192849502, 365.0793650793651 L 307.222192849502, 339.6825396825397 L 329.2164888186306, 352.3809523809524 M 307.222192849502, 352.3809523809524 L 296.2250448649377, 358.73015873015873 L 296.2250448649377, 346.031746031746 L 307.222192849502, 352.3809523809524 M 296.2250448649377, 352.3809523809524 L 290.7264708726555, 355.5555555555556 L 290.7264708726555, 349.2063492063492 L 296.2250448649377, 352.3809523809524 M 307.222192849502, 346.031746031746 L 301.72361885721983, 349.2063492063492 L 301.72361885721983, 342.8571428571429 L 307.222192849502, 346.031746031746 M 307.222192849502, 358.73015873015873 L 301.72361885721983, 361.9047619047619 L 301.72361885721983, 355.5555555555556 L 307.222192849502, 358.73015873015873 M 329.2164888186306, 339.6825396825397 L 318.21934083406626, 346.031746031746 L 318.21934083406626, 333.33333333333337 L 329.2164888186305, 339.6825396825397 M 318.21934083406626, 339.6825396825397 L 312.7207668417841, 342.8571428571429 L 312.7207668417841, 336.5079365079365 L 318.21934083406626, 339.6825396825397 M 329.2164888186305, 333.33333333333337 L 323.7179148263484, 336.5079365079365 L 323.7179148263484, 330.1587301587302 L 329.2164888186305, 333.33333333333337 M 329.2164888186306, 346.031746031746 L 323.7179148263484, 349.2063492063492 L 323.7179148263484, 342.8571428571429 L 329.2164888186306, 346.031746031746 M 329.2164888186306, 365.07936507936506 L 318.21934083406626, 371.42857142857144 L 318.21934083406626, 358.73015873015873 L 329.2164888186306, 365.07936507936506 M 318.21934083406626, 365.07936507936506 L 312.7207668417841, 368.2539682539683 L 312.7207668417841, 361.9047619047619 L 318.21934083406626, 365.07936507936506 M 329.2164888186306, 358.73015873015873 L 323.7179148263484, 361.9047619047619 L 323.7179148263484, 355.55555555555554 L 329.2164888186306, 358.73015873015873 M 329.2164888186306, 371.42857142857144 L 323.7179148263484, 374.6031746031746 L 323.7179148263484, 368.2539682539683 L 329.2164888186306, 371.42857142857144 M 373.20508075688775, 326.984126984127 L 351.21078478775917, 339.6825396825397 L 351.21078478775917, 314.2857142857143 L 373.20508075688775, 326.984126984127 M 351.21078478775917, 326.984126984127 L 340.21363680319485, 333.33333333333337 L 340.21363680319485, 320.63492063492066 L 351.21078478775917, 326.984126984127 M 340.21363680319485, 326.984126984127 L 334.71506281091274, 330.1587301587302 L 334.71506281091274, 323.8095238095238 L 340.21363680319485, 326.984126984127 M 351.21078478775917, 320.63492063492066 L 345.712210795477, 323.8095238095238 L 345.712210795477, 317.46031746031747 L 351.21078478775917, 320.63492063492066 M 351.21078478775917, 333.33333333333337 L 345.712210795477, 336.5079365079365 L 345.712210795477, 330.1587301587302 L 351.21078478775917, 333.33333333333337 M 373.2050807568877, 314.2857142857143 L 362.2079327723235, 320.63492063492066 L 362.20793277232343, 307.93650793650795 L 373.2050807568877, 314.2857142857143 M 362.20793277232343, 314.2857142857143 L 356.70935878004127, 317.46031746031747 L 356.70935878004127, 311.1111111111111 L 362.20793277232343, 314.2857142857143 M 373.2050807568877, 307.93650793650795 L 367.7065067646056, 311.1111111111111 L 367.7065067646056, 304.76190476190476 L 373.2050807568877, 307.93650793650795 M 373.2050807568877, 320.6349206349206 L 367.7065067646056, 323.8095238095238 L 367.7065067646056, 317.46031746031747 L 373.2050807568877, 320.6349206349206 M 373.2050807568878, 339.6825396825397 L 362.2079327723235, 346.031746031746 L 362.2079327723235, 333.33333333333337 L 373.2050807568878, 339.68253968253964 M 362.2079327723235, 339.6825396825397 L 356.70935878004127, 342.8571428571429 L 356.70935878004127, 336.5079365079365 L 362.2079327723235, 339.6825396825397 M 373.20508075688775, 333.33333333333337 L 367.7065067646056, 336.5079365079365 L 367.7065067646056, 330.1587301587302 L 373.20508075688775, 333.33333333333337 M 373.2050807568878, 346.031746031746 L 367.7065067646056, 349.2063492063492 L 367.7065067646056, 342.8571428571429 L 373.2050807568878, 346.031746031746 M 373.2050807568878, 377.7777777777778 L 351.21078478775917, 390.4761904761905 L 351.21078478775917, 365.07936507936506 L 373.2050807568878, 377.7777777777777 M 351.21078478775917, 377.7777777777778 L 340.21363680319485, 384.1269841269841 L 340.21363680319485, 371.42857142857144 L 351.21078478775917, 377.7777777777778 M 340.21363680319485, 377.7777777777778 L 334.71506281091274, 380.95238095238096 L 334.71506281091274, 374.6031746031746 L 340.21363680319485, 377.7777777777778 M 351.21078478775917, 371.42857142857144 L 345.71221079547706, 374.6031746031746 L 345.71221079547706, 368.2539682539683 L 351.21078478775917, 371.42857142857144 M 351.21078478775917, 384.1269841269841 L 345.71221079547706, 387.30158730158735 L 345.71221079547706, 380.95238095238096 L 351.21078478775917, 384.1269841269841 M 373.2050807568878, 365.07936507936506 L 362.2079327723235, 371.42857142857144 L 362.2079327723235, 358.73015873015873 L 373.2050807568878, 365.07936507936506 M 362.2079327723235, 365.07936507936506 L 356.7093587800413, 368.2539682539683 L 356.7093587800413, 361.9047619047619 L 362.2079327723235, 365.07936507936506 M 373.2050807568878, 358.73015873015873 L 367.7065067646056, 361.9047619047619 L 367.7065067646056, 355.55555555555554 L 373.2050807568878, 358.7301587301587 M 373.2050807568878, 371.42857142857144 L 367.7065067646056, 374.6031746031746 L 367.7065067646056, 368.2539682539683 L 373.2050807568878, 371.42857142857144 M 373.2050807568878, 390.4761904761905 L 362.2079327723235, 396.82539682539687 L 362.2079327723235, 384.1269841269841 L 373.2050807568878, 390.4761904761905 M 362.2079327723235, 390.4761904761905 L 356.7093587800414, 393.6507936507936 L 356.7093587800413, 387.30158730158735 L 362.2079327723235, 390.4761904761905 M 373.2050807568878, 384.1269841269841 L 367.7065067646056, 387.30158730158735 L 367.7065067646056, 380.95238095238096 L 373.2050807568878, 384.1269841269841 M 373.2050807568878, 396.82539682539687 L 367.70650676460565, 400 L 367.70650676460565, 393.6507936507936 L 373.2050807568878, 396.82539682539675 \"/></svg>")

(defn save-canvas [canvas filename]
(let[gif (js/GIF. #js {:workers 4
                       :quality 1
                       :width (.-width canvas) 
                       :height  (.-height canvas)
                       ;; CORS :
                       ;;:workerScript "https://cdn.rawgit.com/jnordberg/gif.js/master/dist/gif.worker.js"
                       :workerScript worker
                       })
context (.getContext canvas "2d")
download!(fn[blob]
  (let[download-link (. js/document (createElement "a"))]
    (do
(set! (.-download download-link) filename)
(set! (.-href download-link) (.createObjectURL js/URL blob))
    (.click download-link))))]
(do
  (.addFrame gif context #js {:copy true :delay 200})
(.on gif "finished" download!)
(.render gif))))

(defn save-svg![svg filename]
(let [canvas (js/document.createElement "canvas")
 img (js/Image.)
 context (.getContext canvas "2d")
 svg-url (str->url svg "image/svg+xml")]
(do 
(set! (.-onload img)
               (fn[]
               (do (.drawImage context img 0 0)
                 (save-canvas canvas filename))))
  (set! (.-src img) svg-url))))

#+END_SRC
#+begin_src clojure :exports none
(defn draw-polylines[[w h] pss]
          [:svg {:width w :height h}
           [:rect {:x 0 :y 0 :width w :height h :fill "white"}]
          [:path {:stroke "black" :stroke-width 1
                  :fill "none" :d  (reduce str (map svg-polyline pss))}] ])
(defn output-id [] (.-id js/klipse-container))
(defn str->url [s t]
(let[blob (js/Blob. #js [s] #js {:type t})]
              (.createObjectURL js/URL blob) ))
(defn output->url[]
  (str->url (. (js/XMLSerializer.)
     (serializeToString
      (.-firstChild js/klipse-container))) "image/svg+xml"))
 
;;(let [canvas (js/document.getElementById "canvas-1")
;;      ctx (.getContext canvas "2d")
;;      width (.-width canvas)
;;      height (.-height canvas)]
;;  (set! (.-fillStyle  ctx) "red")
 ;; (.clearRect ctx 0 0 width height)
;;  (.fillRect ctx 0 0 width height))
(def canvas (js/document.getElementById "canvas-1"))

(def svg-elt (js/document.getElementById "klipse-container-7"))
(. (js/XMLSerializer.)
     (serializeToString
      (.-firstChild svg-elt)))
(def img (js/Image.))
(def ctx (.getContext canvas "2d"))
(def gif2 (js/GIF. #js {:workers 4
                       :quality 1
                       :width (.-width canvas) 
                       :height  (.-height canvas)
                       ;; CORS :(
                       ;;:workerScript "https://cdn.rawgit.com/jnordberg/gif.js/master/dist/gif.worker.js"
                       :workerScript worker
                       }))

(def url (str->url (. (js/XMLSerializer.)
     (serializeToString
      (.-firstChild svg-elt))) "image/svg+xml"))
(set! (.-onload img)(fn[](print "loaded ?")
                      ;;(.drawImage ctx img 0 0 400 400)
      (.addFrame gif2 img )
(.on gif2 "finished" (fn[blob](update-download-link! blob)(print "updated ?")))
(.render gif2)
      ))
(set! (.-src img) url )
(.-width img)
url 
(def canvas (js/document.createElement "canvas-1"))
;;(.-value (.-baseVal (.-width (.-firstChild svg-elt))))
https://bl.ocks.org/veltman/1071413ad6b5b542a1a3
#+end_src
#+NAME: src-test-gif-js
#+BEGIN_SRC clojure :exports none

(def canvas (js/document.getElementById "canvas-1"))

(def gif (js/GIF. #js {:workers 4
                          :quality 1
                  :width (.-width canvas) 
                          :height  (.-height canvas)
 :workerScript worker
}))
(def context (.getContext canvas "2d"))
(.addFrame gif context #js {:copy true :delay 200})
(defn update-download-link![blob]
(let[download-link (. js/document (getElementById "image-download-link"))]
    (set! (.-href download-link) (.createObjectURL js/URL blob))
    (.click download-link)))
(.on gif "finished" update-download-link!)
    (.render gif)
#+END_SRC
#+begin_src clojure :exports none
(.-value (.-baseVal (.-height (.-firstChild svg-elt))))
(.-value (.-baseVal (.-width (.-firstChild svg-elt))))

(defn output-id [] (.-id js/klipse-container))

(defn str->url [s t]
(let[blob (js/Blob. #js [s] #js {:type t})]
              (.createObjectURL js/URL blob) ))

(defn output->url[]
  (str->url (. (js/XMLSerializer.)
     (serializeToString
      (.-firstChild js/klipse-container))) "image/svg+xml"))
 #+end_src
#+call: inline-html-header()
#+call: inline-klipse-header()

#+BEGIN_EXPORT html
<script src="https://cdn.rawgit.com/jnordberg/gif.js/master/dist/gif.js"></script>
<script src="https://cdn.rawgit.com/jnordberg/gif.js/master/dist/gif.worker.js"></script>
#+END_EXPORT

#+call: inline-hidden-klipse-clojure-s('("init-reagent-examples" "src-dynamic-homoiconicity" "src-svg-polyline" "src-draw-polylines" "src-add" "src-make-polylines-transform"  "src-rotate" "src-scale" "src-draw-fitted-polylines" "src-make-rotate-around" "src-regular-polygon" "src-fractal-sierpinski" "src-fractal-tree" "src-fractal-koch" "src-fractal-hilbert-transform" "src-fractal-hilbert" "src-fractal-koch-line-transform" "src-fractal-koch-line" "src-fractal-with-steps"))
#+call: inline-klipse-clojure-s('("src-test-canvas"))

#+BEGIN_EXPORT html
<canvas id="canvas-1" width="500" height="300"></canvas>
<script id="gif-js-worker-code" type="text/javascript">
// gif.worker.js 0.2.0 - https://github.com/jnordberg/gif.js
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){var NeuQuant=require("./TypedNeuQuant.js");var LZWEncoder=require("./LZWEncoder.js");function ByteArray(){this.page=-1;this.pages=[];this.newPage()}ByteArray.pageSize=4096;ByteArray.charMap={};for(var i=0;i<256;i++)ByteArray.charMap[i]=String.fromCharCode(i);ByteArray.prototype.newPage=function(){this.pages[++this.page]=new Uint8Array(ByteArray.pageSize);this.cursor=0};ByteArray.prototype.getData=function(){var rv="";for(var p=0;p<this.pages.length;p++){for(var i=0;i<ByteArray.pageSize;i++){rv+=ByteArray.charMap[this.pages[p][i]]}}return rv};ByteArray.prototype.writeByte=function(val){if(this.cursor>=ByteArray.pageSize)this.newPage();this.pages[this.page][this.cursor++]=val};ByteArray.prototype.writeUTFBytes=function(string){for(var l=string.length,i=0;i<l;i++)this.writeByte(string.charCodeAt(i))};ByteArray.prototype.writeBytes=function(array,offset,length){for(var l=length||array.length,i=offset||0;i<l;i++)this.writeByte(array[i])};function GIFEncoder(width,height){this.width=~~width;this.height=~~height;this.transparent=null;this.transIndex=0;this.repeat=-1;this.delay=0;this.image=null;this.pixels=null;this.indexedPixels=null;this.colorDepth=null;this.colorTab=null;this.neuQuant=null;this.usedEntry=new Array;this.palSize=7;this.dispose=-1;this.firstFrame=true;this.sample=10;this.dither=false;this.globalPalette=false;this.out=new ByteArray}GIFEncoder.prototype.setDelay=function(milliseconds){this.delay=Math.round(milliseconds/10)};GIFEncoder.prototype.setFrameRate=function(fps){this.delay=Math.round(100/fps)};GIFEncoder.prototype.setDispose=function(disposalCode){if(disposalCode>=0)this.dispose=disposalCode};GIFEncoder.prototype.setRepeat=function(repeat){this.repeat=repeat};GIFEncoder.prototype.setTransparent=function(color){this.transparent=color};GIFEncoder.prototype.addFrame=function(imageData){this.image=imageData;this.colorTab=this.globalPalette&&this.globalPalette.slice?this.globalPalette:null;this.getImagePixels();this.analyzePixels();if(this.globalPalette===true)this.globalPalette=this.colorTab;if(this.firstFrame){this.writeLSD();this.writePalette();if(this.repeat>=0){this.writeNetscapeExt()}}this.writeGraphicCtrlExt();this.writeImageDesc();if(!this.firstFrame&&!this.globalPalette)this.writePalette();this.writePixels();this.firstFrame=false};GIFEncoder.prototype.finish=function(){this.out.writeByte(59)};GIFEncoder.prototype.setQuality=function(quality){if(quality<1)quality=1;this.sample=quality};GIFEncoder.prototype.setDither=function(dither){if(dither===true)dither="FloydSteinberg";this.dither=dither};GIFEncoder.prototype.setGlobalPalette=function(palette){this.globalPalette=palette};GIFEncoder.prototype.getGlobalPalette=function(){return this.globalPalette&&this.globalPalette.slice&&this.globalPalette.slice(0)||this.globalPalette};GIFEncoder.prototype.writeHeader=function(){this.out.writeUTFBytes("GIF89a")};GIFEncoder.prototype.analyzePixels=function(){if(!this.colorTab){this.neuQuant=new NeuQuant(this.pixels,this.sample);this.neuQuant.buildColormap();this.colorTab=this.neuQuant.getColormap()}if(this.dither){this.ditherPixels(this.dither.replace("-serpentine",""),this.dither.match(/-serpentine/)!==null)}else{this.indexPixels()}this.pixels=null;this.colorDepth=8;this.palSize=7;if(this.transparent!==null){this.transIndex=this.findClosest(this.transparent,true)}};GIFEncoder.prototype.indexPixels=function(imgq){var nPix=this.pixels.length/3;this.indexedPixels=new Uint8Array(nPix);var k=0;for(var j=0;j<nPix;j++){var index=this.findClosestRGB(this.pixels[k++]&255,this.pixels[k++]&255,this.pixels[k++]&255);this.usedEntry[index]=true;this.indexedPixels[j]=index}};GIFEncoder.prototype.ditherPixels=function(kernel,serpentine){var kernels={FalseFloydSteinberg:[[3/8,1,0],[3/8,0,1],[2/8,1,1]],FloydSteinberg:[[7/16,1,0],[3/16,-1,1],[5/16,0,1],[1/16,1,1]],Stucki:[[8/42,1,0],[4/42,2,0],[2/42,-2,1],[4/42,-1,1],[8/42,0,1],[4/42,1,1],[2/42,2,1],[1/42,-2,2],[2/42,-1,2],[4/42,0,2],[2/42,1,2],[1/42,2,2]],Atkinson:[[1/8,1,0],[1/8,2,0],[1/8,-1,1],[1/8,0,1],[1/8,1,1],[1/8,0,2]]};if(!kernel||!kernels[kernel]){throw"Unknown dithering kernel: "+kernel}var ds=kernels[kernel];var index=0,height=this.height,width=this.width,data=this.pixels;var direction=serpentine?-1:1;this.indexedPixels=new Uint8Array(this.pixels.length/3);for(var y=0;y<height;y++){if(serpentine)direction=direction*-1;for(var x=direction==1?0:width-1,xend=direction==1?width:0;x!==xend;x+=direction){index=y*width+x;var idx=index*3;var r1=data[idx];var g1=data[idx+1];var b1=data[idx+2];idx=this.findClosestRGB(r1,g1,b1);this.usedEntry[idx]=true;this.indexedPixels[index]=idx;idx*=3;var r2=this.colorTab[idx];var g2=this.colorTab[idx+1];var b2=this.colorTab[idx+2];var er=r1-r2;var eg=g1-g2;var eb=b1-b2;for(var i=direction==1?0:ds.length-1,end=direction==1?ds.length:0;i!==end;i+=direction){var x1=ds[i][1];var y1=ds[i][2];if(x1+x>=0&&x1+x<width&&y1+y>=0&&y1+y<height){var d=ds[i][0];idx=index+x1+y1*width;idx*=3;data[idx]=Math.max(0,Math.min(255,data[idx]+er*d));data[idx+1]=Math.max(0,Math.min(255,data[idx+1]+eg*d));data[idx+2]=Math.max(0,Math.min(255,data[idx+2]+eb*d))}}}}};GIFEncoder.prototype.findClosest=function(c,used){return this.findClosestRGB((c&16711680)>>16,(c&65280)>>8,c&255,used)};GIFEncoder.prototype.findClosestRGB=function(r,g,b,used){if(this.colorTab===null)return-1;if(this.neuQuant&&!used){return this.neuQuant.lookupRGB(r,g,b)}var c=b|g<<8|r<<16;var minpos=0;var dmin=256*256*256;var len=this.colorTab.length;for(var i=0,index=0;i<len;index++){var dr=r-(this.colorTab[i++]&255);var dg=g-(this.colorTab[i++]&255);var db=b-(this.colorTab[i++]&255);var d=dr*dr+dg*dg+db*db;if((!used||this.usedEntry[index])&&d<dmin){dmin=d;minpos=index}}return minpos};GIFEncoder.prototype.getImagePixels=function(){var w=this.width;var h=this.height;this.pixels=new Uint8Array(w*h*3);var data=this.image;var srcPos=0;var count=0;for(var i=0;i<h;i++){for(var j=0;j<w;j++){this.pixels[count++]=data[srcPos++];this.pixels[count++]=data[srcPos++];this.pixels[count++]=data[srcPos++];srcPos++}}};GIFEncoder.prototype.writeGraphicCtrlExt=function(){this.out.writeByte(33);this.out.writeByte(249);this.out.writeByte(4);var transp,disp;if(this.transparent===null){transp=0;disp=0}else{transp=1;disp=2}if(this.dispose>=0){disp=dispose&7}disp<<=2;this.out.writeByte(0|disp|0|transp);this.writeShort(this.delay);this.out.writeByte(this.transIndex);this.out.writeByte(0)};GIFEncoder.prototype.writeImageDesc=function(){this.out.writeByte(44);this.writeShort(0);this.writeShort(0);this.writeShort(this.width);this.writeShort(this.height);if(this.firstFrame||this.globalPalette){this.out.writeByte(0)}else{this.out.writeByte(128|0|0|0|this.palSize)}};GIFEncoder.prototype.writeLSD=function(){this.writeShort(this.width);this.writeShort(this.height);this.out.writeByte(128|112|0|this.palSize);this.out.writeByte(0);this.out.writeByte(0)};GIFEncoder.prototype.writeNetscapeExt=function(){this.out.writeByte(33);this.out.writeByte(255);this.out.writeByte(11);this.out.writeUTFBytes("NETSCAPE2.0");this.out.writeByte(3);this.out.writeByte(1);this.writeShort(this.repeat);this.out.writeByte(0)};GIFEncoder.prototype.writePalette=function(){this.out.writeBytes(this.colorTab);var n=3*256-this.colorTab.length;for(var i=0;i<n;i++)this.out.writeByte(0)};GIFEncoder.prototype.writeShort=function(pValue){this.out.writeByte(pValue&255);this.out.writeByte(pValue>>8&255)};GIFEncoder.prototype.writePixels=function(){var enc=new LZWEncoder(this.width,this.height,this.indexedPixels,this.colorDepth);enc.encode(this.out)};GIFEncoder.prototype.stream=function(){return this.out};module.exports=GIFEncoder},{"./LZWEncoder.js":2,"./TypedNeuQuant.js":3}],2:[function(require,module,exports){var EOF=-1;var BITS=12;var HSIZE=5003;var masks=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535];function LZWEncoder(width,height,pixels,colorDepth){var initCodeSize=Math.max(2,colorDepth);var accum=new Uint8Array(256);var htab=new Int32Array(HSIZE);var codetab=new Int32Array(HSIZE);var cur_accum,cur_bits=0;var a_count;var free_ent=0;var maxcode;var clear_flg=false;var g_init_bits,ClearCode,EOFCode;function char_out(c,outs){accum[a_count++]=c;if(a_count>=254)flush_char(outs)}function cl_block(outs){cl_hash(HSIZE);free_ent=ClearCode+2;clear_flg=true;output(ClearCode,outs)}function cl_hash(hsize){for(var i=0;i<hsize;++i)htab[i]=-1}function compress(init_bits,outs){var fcode,c,i,ent,disp,hsize_reg,hshift;g_init_bits=init_bits;clear_flg=false;n_bits=g_init_bits;maxcode=MAXCODE(n_bits);ClearCode=1<<init_bits-1;EOFCode=ClearCode+1;free_ent=ClearCode+2;a_count=0;ent=nextPixel();hshift=0;for(fcode=HSIZE;fcode<65536;fcode*=2)++hshift;hshift=8-hshift;hsize_reg=HSIZE;cl_hash(hsize_reg);output(ClearCode,outs);outer_loop:while((c=nextPixel())!=EOF){fcode=(c<<BITS)+ent;i=c<<hshift^ent;if(htab[i]===fcode){ent=codetab[i];continue}else if(htab[i]>=0){disp=hsize_reg-i;if(i===0)disp=1;do{if((i-=disp)<0)i+=hsize_reg;if(htab[i]===fcode){ent=codetab[i];continue outer_loop}}while(htab[i]>=0)}output(ent,outs);ent=c;if(free_ent<1<<BITS){codetab[i]=free_ent++;htab[i]=fcode}else{cl_block(outs)}}output(ent,outs);output(EOFCode,outs)}function encode(outs){outs.writeByte(initCodeSize);remaining=width*height;curPixel=0;compress(initCodeSize+1,outs);outs.writeByte(0)}function flush_char(outs){if(a_count>0){outs.writeByte(a_count);outs.writeBytes(accum,0,a_count);a_count=0}}function MAXCODE(n_bits){return(1<<n_bits)-1}function nextPixel(){if(remaining===0)return EOF;--remaining;var pix=pixels[curPixel++];return pix&255}function output(code,outs){cur_accum&=masks[cur_bits];if(cur_bits>0)cur_accum|=code<<cur_bits;else cur_accum=code;cur_bits+=n_bits;while(cur_bits>=8){char_out(cur_accum&255,outs);cur_accum>>=8;cur_bits-=8}if(free_ent>maxcode||clear_flg){if(clear_flg){maxcode=MAXCODE(n_bits=g_init_bits);clear_flg=false}else{++n_bits;if(n_bits==BITS)maxcode=1<<BITS;else maxcode=MAXCODE(n_bits)}}if(code==EOFCode){while(cur_bits>0){char_out(cur_accum&255,outs);cur_accum>>=8;cur_bits-=8}flush_char(outs)}}this.encode=encode}module.exports=LZWEncoder},{}],3:[function(require,module,exports){var ncycles=100;var netsize=256;var maxnetpos=netsize-1;var netbiasshift=4;var intbiasshift=16;var intbias=1<<intbiasshift;var gammashift=10;var gamma=1<<gammashift;var betashift=10;var beta=intbias>>betashift;var betagamma=intbias<<gammashift-betashift;var initrad=netsize>>3;var radiusbiasshift=6;var radiusbias=1<<radiusbiasshift;var initradius=initrad*radiusbias;var radiusdec=30;var alphabiasshift=10;var initalpha=1<<alphabiasshift;var alphadec;var radbiasshift=8;var radbias=1<<radbiasshift;var alpharadbshift=alphabiasshift+radbiasshift;var alpharadbias=1<<alpharadbshift;var prime1=499;var prime2=491;var prime3=487;var prime4=503;var minpicturebytes=3*prime4;function NeuQuant(pixels,samplefac){var network;var netindex;var bias;var freq;var radpower;function init(){network=[];netindex=new Int32Array(256);bias=new Int32Array(netsize);freq=new Int32Array(netsize);radpower=new Int32Array(netsize>>3);var i,v;for(i=0;i<netsize;i++){v=(i<<netbiasshift+8)/netsize;network[i]=new Float64Array([v,v,v,0]);freq[i]=intbias/netsize;bias[i]=0}}function unbiasnet(){for(var i=0;i<netsize;i++){network[i][0]>>=netbiasshift;network[i][1]>>=netbiasshift;network[i][2]>>=netbiasshift;network[i][3]=i}}function altersingle(alpha,i,b,g,r){network[i][0]-=alpha*(network[i][0]-b)/initalpha;network[i][1]-=alpha*(network[i][1]-g)/initalpha;network[i][2]-=alpha*(network[i][2]-r)/initalpha}function alterneigh(radius,i,b,g,r){var lo=Math.abs(i-radius);var hi=Math.min(i+radius,netsize);var j=i+1;var k=i-1;var m=1;var p,a;while(j<hi||k>lo){a=radpower[m++];if(j<hi){p=network[j++];p[0]-=a*(p[0]-b)/alpharadbias;p[1]-=a*(p[1]-g)/alpharadbias;p[2]-=a*(p[2]-r)/alpharadbias}if(k>lo){p=network[k--];p[0]-=a*(p[0]-b)/alpharadbias;p[1]-=a*(p[1]-g)/alpharadbias;p[2]-=a*(p[2]-r)/alpharadbias}}}function contest(b,g,r){var bestd=~(1<<31);var bestbiasd=bestd;var bestpos=-1;var bestbiaspos=bestpos;var i,n,dist,biasdist,betafreq;for(i=0;i<netsize;i++){n=network[i];dist=Math.abs(n[0]-b)+Math.abs(n[1]-g)+Math.abs(n[2]-r);if(dist<bestd){bestd=dist;bestpos=i}biasdist=dist-(bias[i]>>intbiasshift-netbiasshift);if(biasdist<bestbiasd){bestbiasd=biasdist;bestbiaspos=i}betafreq=freq[i]>>betashift;freq[i]-=betafreq;bias[i]+=betafreq<<gammashift}freq[bestpos]+=beta;bias[bestpos]-=betagamma;return bestbiaspos}function inxbuild(){var i,j,p,q,smallpos,smallval,previouscol=0,startpos=0;for(i=0;i<netsize;i++){p=network[i];smallpos=i;smallval=p[1];for(j=i+1;j<netsize;j++){q=network[j];if(q[1]<smallval){smallpos=j;smallval=q[1]}}q=network[smallpos];if(i!=smallpos){j=q[0];q[0]=p[0];p[0]=j;j=q[1];q[1]=p[1];p[1]=j;j=q[2];q[2]=p[2];p[2]=j;j=q[3];q[3]=p[3];p[3]=j}if(smallval!=previouscol){netindex[previouscol]=startpos+i>>1;for(j=previouscol+1;j<smallval;j++)netindex[j]=i;previouscol=smallval;startpos=i}}netindex[previouscol]=startpos+maxnetpos>>1;for(j=previouscol+1;j<256;j++)netindex[j]=maxnetpos}function inxsearch(b,g,r){var a,p,dist;var bestd=1e3;var best=-1;var i=netindex[g];var j=i-1;while(i<netsize||j>=0){if(i<netsize){p=network[i];dist=p[1]-g;if(dist>=bestd)i=netsize;else{i++;if(dist<0)dist=-dist;a=p[0]-b;if(a<0)a=-a;dist+=a;if(dist<bestd){a=p[2]-r;if(a<0)a=-a;dist+=a;if(dist<bestd){bestd=dist;best=p[3]}}}}if(j>=0){p=network[j];dist=g-p[1];if(dist>=bestd)j=-1;else{j--;if(dist<0)dist=-dist;a=p[0]-b;if(a<0)a=-a;dist+=a;if(dist<bestd){a=p[2]-r;if(a<0)a=-a;dist+=a;if(dist<bestd){bestd=dist;best=p[3]}}}}}return best}function learn(){var i;var lengthcount=pixels.length;var alphadec=30+(samplefac-1)/3;var samplepixels=lengthcount/(3*samplefac);var delta=~~(samplepixels/ncycles);var alpha=initalpha;var radius=initradius;var rad=radius>>radiusbiasshift;if(rad<=1)rad=0;for(i=0;i<rad;i++)radpower[i]=alpha*((rad*rad-i*i)*radbias/(rad*rad));var step;if(lengthcount<minpicturebytes){samplefac=1;step=3}else if(lengthcount%prime1!==0){step=3*prime1}else if(lengthcount%prime2!==0){step=3*prime2}else if(lengthcount%prime3!==0){step=3*prime3}else{step=3*prime4}var b,g,r,j;var pix=0;i=0;while(i<samplepixels){b=(pixels[pix]&255)<<netbiasshift;g=(pixels[pix+1]&255)<<netbiasshift;r=(pixels[pix+2]&255)<<netbiasshift;j=contest(b,g,r);altersingle(alpha,j,b,g,r);if(rad!==0)alterneigh(rad,j,b,g,r);pix+=step;if(pix>=lengthcount)pix-=lengthcount;i++;if(delta===0)delta=1;if(i%delta===0){alpha-=alpha/alphadec;radius-=radius/radiusdec;rad=radius>>radiusbiasshift;if(rad<=1)rad=0;for(j=0;j<rad;j++)radpower[j]=alpha*((rad*rad-j*j)*radbias/(rad*rad))}}}function buildColormap(){init();learn();unbiasnet();inxbuild()}this.buildColormap=buildColormap;function getColormap(){var map=[];var index=[];for(var i=0;i<netsize;i++)index[network[i][3]]=i;var k=0;for(var l=0;l<netsize;l++){var j=index[l];map[k++]=network[j][0];map[k++]=network[j][1];map[k++]=network[j][2]}return map}this.getColormap=getColormap;this.lookupRGB=inxsearch}module.exports=NeuQuant},{}],4:[function(require,module,exports){var GIFEncoder,renderFrame;GIFEncoder=require("./GIFEncoder.js");renderFrame=function(frame){var encoder,page,stream,transfer;encoder=new GIFEncoder(frame.width,frame.height);if(frame.index===0){encoder.writeHeader()}else{encoder.firstFrame=false}encoder.setTransparent(frame.transparent);encoder.setRepeat(frame.repeat);encoder.setDelay(frame.delay);encoder.setQuality(frame.quality);encoder.setDither(frame.dither);encoder.setGlobalPalette(frame.globalPalette);encoder.addFrame(frame.data);if(frame.last){encoder.finish()}if(frame.globalPalette===true){frame.globalPalette=encoder.getGlobalPalette()}stream=encoder.stream();frame.data=stream.pages;frame.cursor=stream.cursor;frame.pageSize=stream.constructor.pageSize;if(frame.canTransfer){transfer=function(){var i,len,ref,results;ref=frame.data;results=[];for(i=0,len=ref.length;i<len;i++){page=ref[i];results.push(page.buffer)}return results}();return self.postMessage(frame,transfer)}else{return self.postMessage(frame)}};self.onmessage=function(event){return renderFrame(event.data)}},{"./GIFEncoder.js":1}]},{},[4]);
//# sourceMappingURL=gif.worker.js.map
</script>
<a id="image-download-link" href="" download="pixel-art">Download !</a>
#+END_EXPORT

#+call: inline-klipse-clojure-s('("src-gif-save-svg"))


#+call: inline-klipse-reagent-s('("src-gui-fractals" "src-gui-fractals-use"))

#+call: inline-klipse-reagent-s('("src-gui-fractals-with-steps" "src-gui-fractals-with-steps-use"))

#+call: inline-klipse-reagent-s('("src-fractal-sierpinski" "src-fractal-sierpinski-use"))

#+call: inline-klipse-reagent-s('("src-regular-polygon" "src-regular-polygon-use"))

#+call: inline-klipse-reagent-s('("src-fractal-tree" "src-fractal-tree-use"))

#+call: inline-klipse-reagent-s('("src-fractal-koch" "src-fractal-koch-use"))

#+call: inline-klipse-reagent-s('("src-fractal-hilbert-transform" "src-fractal-hilbert-transform-use"))

#+call: inline-klipse-reagent-s('("src-fractal-hilbert" "src-fractal-hilbert-use"))

#+call: inline-klipse-reagent-s('("src-fractal-koch-line-transform" "src-fractal-koch-line-transform-use"))

#+call: inline-klipse-reagent-s('("src-fractal-koch-line" "src-fractal-koch-line-use"))

** Future Works
- Fractal in Fractal : step-elt as a function of step nb to adjust for required precision
- hilbert in sierpinski 4
- golden ratio squares and curve
- golden ratio with sierpinski squares
#+call: text-test()

#+call: inline-klipse-footer()



* DONE Bezier Curves
  SCHEDULED: <2017-03-20 Mon>
  :PROPERTIES:
  :EXPORT_JEKYLL_LAYOUT:
  :filename: 2017-03-20-bezier-curves
  :END:
  :EXPORT_JEKYLL_LAYOUT: 
  :filename: 2017-03-20-bezier-curves
  :END:

#+NAME: src-weighted-mean
#+BEGIN_SRC clojure :exports none
(defn weighted-mean [t [p0 p1]]
(add (scale (- 1 t) p0) (scale t p1)))
#+END_SRC

#+NAME: src-weighted-mean-use
#+BEGIN_SRC clojure :exports none
(weighted-mean 0.25 [[0 1] [1 2]])
#+END_SRC


#+NAME: src-bezier
#+BEGIN_SRC clojure :exports none
(defn bezier-step [ps t]
(condp = (count ps)
1 (first ps)
2 (let[[p0 p1] ps] (weighted-mean t p0 p1))
3 (let[[p0 p1 p2] ps] (add (scale (* (- 1 t) (- 1 t)) p0) (add (scale (* 2 t (- 1 t)) p1) (scale (* t t) p2))))
(bezier-step (map (partial weighted-mean t) (partition 2 1 ps)) t)))

(defn bezier [n ps]
(if (< (count ps) 2) ps (mapv (comp (partial bezier-step ps) (partial * (/ 1 n))) (range (inc n)))))
#+END_SRC

#+NAME: src-bezier-use
#+BEGIN_SRC clojure :exports none
(def ctrl-pts [[0 0][0 1][2 1]])
[draw-fitted-polylines [400 400] [ctrl-pts (bezier 16 ctrl-pts)]]
#+END_SRC


#+NAME: src-square-with-curve
#+BEGIN_SRC clojure :exports none
(defn square-curve[n p0-p2 angle]
(let[inv-sqrt-2 (/ 1. (sqrt 2))
  p01 (weighted-mean inv-sqrt-2 p0-p2)
  p21 (weighted-mean (- 1. inv-sqrt-2) p0-p2)
  [p0 p2] p0-p2
  p1  (weighted-mean 0.5 [((make-rotate-around p0 (/ angle 2)) p01)
                          ((make-rotate-around p2 (/ angle -2)) p21)])]
                          (bezier n [p0 p1 p2])))

(defn square-with-curve [n angle]
(let[square (regular-polygon 4)]
[square (square-curve n [(first square)(nth square 2)] angle)]))
#+END_SRC

#+NAME: src-square-with-curve-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400] (square-with-curve 10 (/ PI 4))] 
#+END_SRC

#+NAME: src-squares-params-f
#+BEGIN_SRC clojure :exports none
(defn power [x n] (nth (iterate (partial * x) 1) n))
(defn squares-params-f[angle invertRatio]
  (let[golden-ratio (/ 2. (+ 1. (sqrt 5)))
       [factor ratio a] (if invertRatio [-1 (/ 1. golden-ratio) angle ]
                                        [1 golden-ratio (- angle)])]
    [[] [(make-polylines-transform (comp (make-rotate-around [factor 0] a)
                                         (partial add [(* factor (+ 1. ratio)) 0])
                                         (partial scale ratio)))
         ;; should use (power ratio ?)
         (fn[n](square-with-curve (max 1 (if invertRatio (+ 10 n) (- 10 n))) 
                                  (* factor a)))]]))
#+END_SRC

#+NAME: src-squares-params-f-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400]
 (let[[init [step-f step-elts-f]] (squares-params-f (/ PI 4) false)]
     (step-f (step-elts-f 5)))]
#+END_SRC


#+NAME: src-fractal-f
#+BEGIN_SRC clojure :exports none
         (defn fractal-step-f [[step-f step-elts-f] [current-elts i]]
  (into (step-elts-f i) (step-f current-elts)))

(defn params->params-f [[init-elts [step-f step-elts]]] [init-elts [step-f (constantly step-elts)]])

(defn fractal-f [[init-elts step-params-f] details]
  (reduce (fn[current-elts i] (fractal-step-f step-params-f [current-elts i])) init-elts (range (dec details) -1 -1)))
#+END_SRC

#+NAME: src-fractal-f-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400](fractal-f (squares-params-f (/ PI 4) false) 4)]
#+END_SRC

#+NAME: src-gui-golden-squares
#+BEGIN_SRC clojure :exports none
(def golden-squares-state (reagent.core/atom {:angle (/ PI -2) }))
(defn gui-golden-squares[]
  (let[angle (:angle @golden-squares-state)]
    [:div 
     [:div [:input {:type "range" :value (:angle @golden-squares-state) :step 0.01 :min (/ PI -2)  :max (/ PI 2)  :style {:width "90%"}
                    :on-change (fn[e] (swap! golden-squares-state assoc 
:angle (js/parseFloat (.-target.value e))))}]]
[draw-fitted-polylines [400 400](fractal-f (squares-params-f angle false) 4)]]))
#+END_SRC

#+NAME: src-gui-golden-squares-2
#+BEGIN_SRC clojure :exports none
(def golden-squares-state-2 (reagent.core/atom {:angle (/ PI -2) }))
(defn gui-golden-squares-2[]
  (let[angle (:angle @golden-squares-state-2)]
    [:div 
     [:div [:input {:type "range" :value (:angle @golden-squares-state-2) :step 0.01 :min (/ PI -2)  :max (/ PI 2)  :style {:width "90%"}
                    :on-change (fn[e] (swap! golden-squares-state-2 assoc 
:angle (js/parseFloat (.-target.value e))))}]]
     [draw-fitted-polylines [512 512](let[f1 (fractal-f (squares-params-f angle false) 12)]
                                   ((make-polylines-transform (partial rotate (/ angle -2)))(reduce into [] [f1 ((make-polylines-transform (comp (make-rotate-around [-1 0] angle)(partial add [-2 0])
                                                                                        (fn[[x y]][(- x) y]))) f1)])))]]))
#+END_SRC


#+NAME: src-centered-golden-squares
#+BEGIN_SRC clojure :exports none
(defn centered-golden-squares[[dx zoom angle] [details-inc details-dec]]
  ((make-polylines-transform (comp (partial add [(+ dx) 0]) (partial rotate (* angle -0.5)) (partial scale zoom)))
   (into (fractal-f (squares-params-f angle true) details-inc) (fractal-f (squares-params-f angle false) details-dec))))

(defn inclusive-range [n [[first last] times]]
  (if (== times 1) (mapv (comp (partial + first) (partial * (/ (- last first) n))) (range n))
    (into (inclusive-range (quot n times) [[first last] 1]) (inclusive-range (- n (quot n times)) [[last first] (dec times)]))))

(defn golden-squares-anim-params [n1 n2]
  (let[golden-ratio (/ 2. (+ 1. (sqrt 5)))
       with-break (fn[c](let[h (quot n1 2)
                             half-1 (vec (take h c))
                             half-2 (drop h c)]
                          (-> half-1 (into (repeat n2 (first half-2)))
                                      (into half-2))))
       dx (with-break (inclusive-range n1 [[0 (/ (+ 1 golden-ratio) golden-ratio)] 1]))
       dx (into dx dx)
       zoom (with-break (inclusive-range n1 [[(/ (+ 1 (sqrt 5)) 2) 1] 1]))
       zoom (into zoom zoom)
       angles (into (with-break (inclusive-range n1 [[0 (/ PI 2)] 2]))
                          (with-break (inclusive-range n1 [[0 (/ PI -2)] 2])))]
    (mapv vector dx zoom angles)))
#+END_SRC

#+NAME: src-centered-golden-squares-use
#+BEGIN_SRC clojure :exports none
[draw-fitted-polylines [400 400](centered-golden-squares (nth (golden-squares-anim-params 100 10) 55) [4 4])]
#+END_SRC

#+NAME: src-gui-golden-squares-anim
#+BEGIN_SRC clojure :exports none
(def golden-squares-anim-state (reagent.core/atom {:step 0 }))
(def anim-params (golden-squares-anim-params 100 10))
(def data (into anim-params anim-params))
(def wh [1024 512])
(def details [5 8])
(def fitting-transform (make-polylines-transform (make-fitting-transform wh 
                                                                         (reduce into [] (map (fn[p] (centered-golden-squares p
                                                                                                        [0 5])) anim-params)))))
(defn gui-golden-squares[]
  (let[step (:step @golden-squares-anim-state)
       n-steps (count data)]
    [:div
     [:div [:input {:type "range" :value (:step @golden-squares-anim-state) :min 0  :max n-steps :style {:width "90%"}
                    :on-change (fn[e] (swap! golden-squares-anim-state assoc 
                                             :step (js/parseFloat (.-target.value e))))}]]
     [draw-polylines wh (fitting-transform (centered-golden-squares (nth data step) details))]]))
#+END_SRC

#+NAME: src-gui-golden-squares-anim-use
#+BEGIN_SRC clojure :exports none
(defn gui-golden-squares[]
  (let[step (:step @golden-squares-anim-state)
       n-steps (count data)]
    [:div
     [:div [:input {:type "range" :value (:step @golden-squares-anim-state) :min 0  :max n-steps :style {:width "90%"}
                    :on-change (fn[e] (swap! golden-squares-anim-state assoc 
                                             :step (js/parseFloat (.-target.value e))))}]]
     [draw-polylines wh (fitting-transform (centered-golden-squares (nth data step) details))]]))
#+END_SRC


#+NAME: src-golden-squares-anim-use
#+BEGIN_SRC clojure :exports none
(def wh [1024 512])
(def details [5 8])
(defn get-date[] (.getTime (js/Date.)))
[draw-polylines wh (fitting-transform 
                     (centered-golden-squares (nth anim-params (mod (int (/ (get-date) 50))
                                                             (count anim-params))) details))]
#+END_SRC


#+call: inline-html-header()
#+call: inline-klipse-header()


#+call: inline-hidden-klipse-clojure-s('("init-reagent-examples" "src-svg-polyline" "src-draw-polylines" "src-add" "src-make-polylines-transform"  "src-rotate" "src-scale" "src-draw-fitted-polylines" "src-make-rotate-around" "src-regular-polygon" "src-weighted-mean" "src-bezier" "src-square-with-curve" "src-squares-params-f" "src-fractal-f" "src-gui-golden-squares" "src-centered-golden-squares" "src-gui-golden-squares-anim"))



#+call: inline-klipse-reagent-anim-s('("src-golden-squares-anim-use") 50)

#+call: inline-klipse-reagent-s('("src-gui-golden-squares"))
#+call: inline-klipse-reagent-s('("src-gui-golden-squares-2"))

#+call: inline-klipse-reagent-s('("src-centered-golden-squares" "src-centered-golden-squares-use"))

#+call: inline-klipse-reagent-s('("src-fractal-f" "src-fractal-f-use"))

#+call: inline-klipse-reagent-s('("src-squares-params-f" "src-squares-params-f-use"))

#+call: inline-klipse-reagent-s('("src-square-with-curve" "src-square-with-curve-use"))

#+call: inline-klipse-reagent-s('("src-bezier" "src-bezier-use"))

#+call: inline-klipse-clojure-s('("src-weighted-mean" "src-weighted-mean-use"))








#+call: inline-klipse-footer()

test

* polylines interpolations
* Snowflakes
by folding and cutting
* tiles
* Drosde effect
combo with fractals and tiles
for instance for sierpinski fractals :
sierp-4 tiles, esp. horizontals
stretch along the horizontal axis so that it ends(e.g. rightmost) at Ã—3 the size
of the beginning (e.g. leftmost).
Wrap around a circle (x \rightarrow theta, y \rightmost r)

* patterns
* celtic patterns
* bounces

* physics
* solar system
Euler -> Verlet
* Fractal texts
ISEP
 
ISEPISEP
    S
    E
    P
    I
    S
    E
 ISEPISEP

ISEPISEP
S
E
P
ISEPISEP
S
E
P
ISEPISEP


ISEPISEP
S
E
P
ISEPISEPI
        S
        E
 ISEPISEP

ISEPISEPI
S       S
E       E
PISEPISEP
I
S
E
P


https://github.com/Enderer/sixteensegment/blob/master/src/SixteenSegment.js

* Mazes
Possible to have a given (fractal) path given beforehand ?
TODO implement connecting algo

* Data viz
http://blog.klipse.tech/data/2017/03/17/data-driven-documents-google-charts.html

* Escher
cf. Fish
#+NAME: escher
#+BEGIN_SRC python  -n :var detail=1 :exports code
import turtle as t

def add(x0y0, x1y1):
    """
    Additionne deux vecteurs (utilisÃ© pour translater un point d'un vecteur)
    """
    return (x0y0[0] + x1y1[0], x0y0[1] + x1y1[1])

def update_bounds(min_max, v):
    """
    retourne le tuple de bornes min, max Ã©ventuellement mis Ã  jour
    pour prendre en compte la valeur v
    """
    if v < min_max[0] :
        min_max= (v, min_max[1])
    if v > min_max[1] :
        min_max= (min_max[0], v)
    return min_max

def bounding_box(lines):
    """
    retourne le tuple de deux points qui dÃ©limitent le rectangle
    englobant les points de l'ensemble de lignes passÃ©es en argument
    """
    inf=float('inf')
    x_bounds= y_bounds=(inf, -inf)
    for line in lines:
        for (x, y) in line:
            x_bounds= update_bounds(x_bounds, x)
            y_bounds= update_bounds(y_bounds, y)
    return ((x_bounds[0], y_bounds[0]),(x_bounds[1], y_bounds[1]))


def translate(lines, xy):
    """
    translate toutes les coordonnÃ©es d'un ensemble de lignes
    """
    res=[]
    for line in lines:
        current_line=[]
        for point in line:
            current_line.append(add(point, xy))
        res.append(tuple(current_line))
    return tuple(res)

def rot(lines):
    """
    rotation d'un ensemble de lignes, sens horaire
    """
    res= []
    for line in lines:
        current_line= []
        for (x, y) in line:
            current_line.append((y, -x))
        res.append(tuple(current_line))
    return tuple(res)

def rot_counter(lines):
    """
    rotation d'un ensemble de lignes, sens anti-horaire
    """
    res= []
    for line in lines:
        current_line= []
        for (x, y) in line:
            current_line.append((-y, x))
        res.append(tuple(current_line))
    return tuple(res)

def above(fig1, fig2):
    """
    retourne une figure (=ensemble de lignes) qui est composÃ©e de la figure 2 au dessus de la figure 1
    """
    ((x_min1, y_min1),(x_max1, y_max1))= bounding_box(fig1)
    ((x_min2, y_min2),(x_max2, y_max2))= bounding_box(fig2)
    return fig1 + translate(fig2, (x_min1-x_min2, y_max1-y_min2))

def beside(fig1, fig2):
    """
    retourne une figure (=ensemble de lignes) qui est composÃ©e de la figure 2 Ã  droite de la figure 1
    """
    ((x_min1, y_min1),(x_max1, y_max1))= bounding_box(fig1)
    ((x_min2, y_min2),(x_max2, y_max2))= bounding_box(fig2)
    return fig1 + translate(fig2, (x_max1-x_min2, y_min1-y_min2))

def quartet(fig0, fig1, fig2, fig3):
    """
    retourne une figure (=ensemble de lignes) qui est composÃ©e de :
    fig0 fig1
    fig2 fig3
    """
    return above(beside(fig2, fig3), beside(fig0, fig1))

def quartet_fun(fig0, f):
    """
    retourne une figure composÃ©e de applications successives
    de la fonction f (par exemple une rotation) appliquÃ©e
    3 0
    2 1
    """
    fig1= f(fig0)
    fig2= f(fig1)
    fig3= f(fig2)
    return quartet(fig3, fig0, fig2, fig1)

def smaller(lines):
    """
    retourne une figure (ensemble de lignes) dont la taille est divisÃ©e par 2
    (homothÃ©tie centrÃ©e sur l'origine du repÃ¨re, de rapport 1/2).
    """
    res=[]
    for line in lines:
        current_line=[]
        for (x, y) in line:
            current_line.append((x/2, y/2))
        res.append(tuple(current_line))
    return tuple(res)

def side(fig, n):
    """
    retourne une figure rÃ©cursive de niveau n selon un cÃ´tÃ© (le haut)
    """
    if n == 0:
        return fig
    fig= smaller(fig)
    return quartet(side(fig, n-1), side(fig, n-1), rot_counter(fig), fig)

def corner(fig_u, fig_t, n):
    """
    retourne une figure rÃ©cursive de niveau n selon un coin (haut gauche)
    fig_u est en bas Ã  droite, fig_t sert pour le cÃ´tÃ© (haut)
    """
    if n == 0:
        return fig_u
    fig_u= smaller(fig_u)
    fig_t= smaller(fig_t)
    s= side(fig_t, n-1)
    return quartet(corner(fig_u, fig_t, n-1), s, rot_counter(s), fig_u)

def draw(lines):
    """
    affiche une figure (ensemble de lignes), en redimensionnant l'affichage en consÃ©quence.
    """
    bb= bounding_box(lines)
    t.setworldcoordinates(bb[0][0], bb[0][1], bb[1][0], bb[1][1])
    for line in lines:
        t.penup()
        for (x,y) in line:
            t.goto(x, y)
            t.pendown()

# from http://www.frank-buss.de/lisp/functional.html
fish_p=(((4, 4), (6,0)), ((0, 3),(3, 4)), ((3, 4),(0, 8))
,((0, 8), (0, 3)), ((4, 5),(7, 6)), ((7, 6), (4, 10))
,((4, 10), (4, 5)), ((11, 0), (10, 4)), ((10, 4),(8, 8))
,((8, 8), (4, 13)), ((4, 13), (0, 16)), ((11, 0),(14, 2))
,((14, 2), (16, 2)), ((10, 4), (13, 5)), ((13, 5),(16, 4))
,((9, 6), (12, 7)), ((12, 7), (16, 6)), ((8, 8),(12, 9))
,((12, 9), (16, 8)), ((8, 12), (16, 10)), ((0, 16),(6, 15))
,((6, 15),(8, 16)), ((8, 16),(12, 12)), ((12, 12),(16, 12))
,((10, 16),(12, 14)), ((12, 14),(16, 13)), ((12, 16), (13, 15))
,((13, 15), (16, 14)), ((14, 16),(16, 15)))

fish_q= (((2, 0), (4, 5)), ((4, 5),(4, 7)), ((4, 0),(6, 5))
, ((6, 5), (6, 7)), ((6, 0),(8, 5)), ((8, 5),(8, 8))
, ((8, 0), (10, 6)), ((10, 6), (10, 9)), ((10, 0), (14, 11))
, ((12, 0), (13, 4)), ((13, 4), (16, 8)), ((16, 8), (15, 10))
, ((15, 10), (16, 16)), ((16, 16), (12, 10)), ((12, 10),(6, 7))
, ((6, 7), (4, 7)), ((4, 7), (0, 8)), ((13, 0), (16, 6))
, ((14, 0), (16, 4)), ((15, 0), (16, 2)), ((0, 10), (7, 11))
, ((9, 12), (10, 10)), ((10, 10), (12, 12)), ((12, 12), (9, 12))
, ((8, 15), (9, 13)), ((9, 13), (11, 15)), ((11, 15), (8, 15))
, ((0, 12), (3, 13)), ((3, 13), (7, 15)), ((7, 15), (8, 16))
, ((2, 16), (3, 13)), ((4, 16), (5, 14)), ((6, 16), (7, 15)))

fish_r= (((0, 12), (1, 14)), ((0, 8), (2, 12)), ((0, 4), (5, 10))
, ((0, 0), (8, 8)), ((1, 1), (4, 0)), ((2, 2), (8, 0))
, ((3, 3), (8, 2)), ((8, 2), (12, 0)), ((5, 5), (12, 3))
, ((12, 3), (16, 0)), ((0, 16), (2, 12)), ((2, 12), (8, 8))
, ((8, 8), (14, 6)), ((14, 6), (16, 4)), ((6, 16), (11, 10))
, ((11, 10), (16, 6)), ((11, 16), (12, 12)), ((12, 12), (16, 8))
, ((12, 12), (16, 16)), ((13, 13), (16, 10)), ((14, 14), (16, 12))
, ((15, 15), (16, 14)))

fish_s= (((0, 0), (4, 2)), ((4, 2), (8, 2)), ((8, 2), (16, 0))
, ((0, 4), (2, 1)), ((0, 6), (7, 4)), ((0, 8), (8, 6))
, ((0, 10), (7, 8)), ((0, 12), (7, 10)), ((0, 14), (7, 13))
, ((8, 16), (7, 13)), ((7, 13), (7, 8)), ((7, 8), (8, 6))
, ((8, 6), (10, 4)), ((10, 4), (16, 0)), ((10, 16), (11, 10))
, ((10, 6), (12, 4)), ((12, 4), (12, 7)), ((12, 7), (10, 6))
, ((13, 7), (15, 5)), ((15, 5), (15, 8)), ((15, 8), (13, 7))
, ((12, 16), (13, 13)), ((13, 13), (15, 9)), ((15, 9), (16, 8))
, ((13, 13), (16, 14)), ((14, 11), (16, 12)), ((15, 9), (16, 10)))

fish_t= quartet(fish_p, fish_q, fish_r, fish_s)
fish_u= quartet_fun(fish_q, rot)

t.delay(0)
t.speed(0)
t.hideturtle()
#t.tracer(0, 1)
draw(quartet_fun(rot(corner(fish_u, fish_t, detail)), rot))
t.update()
ts=t.getscreen()
ts.getcanvas().postscript(file="fish_%d.eps" % detail)
#+END_SRC


#+CALL: escher(detail=0) :exports none

#+CALL: escher(detail=1) :exports none

#+CALL: escher(detail=2) :exports none

#+CALL: escher(detail=3) :exports none

#+CALL: escher(detail=4) :exports none


#+BEGIN_SRC shell :exports none
for detail in $(seq 0 4); do epstopdf fish_${detail}.eps; pdf2svg fish_${detail}.pdf fish_${detail}.svg; done
#+END_SRC



* Gears

?â™‚â™€



#+BEGIN_EXPORT html
<script>
window.klipse_settings = {
  selector: '.klipse',
  selector_reagent: '.reagent'
};
</script>
<script src="https://storage.googleapis.com/app.klipse.tech/plugin/js/klipse_plugin.js"></script>


#+END_EXPORT
* Exports

<script src="http://cdn.rawgit.com/jnordberg/gif.js/v0.1.6/dist/gif.js"></script>


https://cdn.rawgit.com/jnordberg/gif.js/master/dist/gif.js

https://cdn.rawgit.com/jnordberg/gif.js/master/dist/gif.worker.js


Clojurescript gif.js :
https://github.com/jackschaedler/goya
** svg
https://bl.ocks.org/veltman/1071413ad6b5b542a1a3
** canvas
http://bl.ocks.org/veltman/03edaa335f93b5a9ee57


(def canvas (js/document.getElementById "canvas-1")) 
(defn save-canvas [canvas]
(let[gif (js/GIF. #js {:workers 4
                       :quality 1
                       :width (.-width canvas) 
                       :height  (.-height canvas)
                       ;; CORS :(
                       ;;:workerScript "https://cdn.rawgit.com/jnordberg/gif.js/master/dist/gif.worker.js"
                       :workerScript worker
                       })
context (.getContext canvas "2d")
update-download-link!(fn[blob]
  (let[download-link (. js/document (getElementById "image-download-link"))]
    (set! (.-href download-link) (.createObjectURL js/URL blob))
    (.click download-link)))
     ]
(do
  (.addFrame gif context #js {:copy true :delay 200})
(.on gif "finished" update-download-link!)
(.render gif))))
(def canvas (js/document.createElement "canvas"))
(.appendChild (js/document.getElementById "klipse-container-1")
              canvas)
(def img (js/Image.))
(def context (.getContext canvas "2d"))
(set! (.-onload img)
               (fn[]
               (do (print "on load!")
                 (.drawImage context img 0 0)
                 (save-canvas canvas))))
(def test-svg "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\"><rect y=\"0\" fill=\"white\" width=\"200\" x=\"0\" height=\"200\"></rect><path stroke=\"black\" fill=\"none\" stroke-width=\"1\" d=\"M 200, 100 L 50.00000000000002, 186.60254037844388 L 49.999999999999964, 13.397459621556166 L 199.99999999999997, 99.99999999999994 M 200, 100 L 100, 200 L 0, 100.00000000000001 L 99.99999999999999, 0 L 200, 99.99999999999997 M 200, 100 L 130.90169943749476, 195.10565162951536 L 19.098300562505273, 158.77852522924732 L 19.09830056250526, 41.2214747707527 L 130.90169943749473, 4.894348370484636 L 200, 99.99999999999997 M 200, 100 L 150, 186.60254037844385 L 50.00000000000002, 186.60254037844388 L 0, 100.00000000000004 L 49.99999999999996, 13.397459621556166 L 149.99999999999994, 13.397459621556095 L 200, 99.99999999999991 \"></path></svg>")
(defn str->url [s t]
(let[blob (js/Blob. #js [s] #js {:type t})]
              (.createObjectURL js/URL blob) ))
(def tst-svg-url (str->url test-svg "image/svg+xml"))
;;(save-canvas (js/document.getElementById "canvas-1"))
;;(set! (.-src img) tst-svg-url)
(defn save-svg[svg]
(let [canvas (js/document.createElement "canvas")
 img (js/Image.)
 context (.getContext canvas "2d")
 svg-url (str->url svg "image/svg+xml")]
(do 
(set! (.-onload img)
               (fn[]
               (do (print "on load!")
                 (.drawImage context img 0 0)
                 (save-canvas canvas))))
  (set! (.-src img) svg-url))))
(save-svg test-svg)
